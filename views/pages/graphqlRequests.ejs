import requestGraphql from './request'

export default {

  create : function({url, variables, token}){
  let query = ` mutation add<%- nameCp -%>(
  <% for ( i=0; i<attributesArr.length; i++ ){-%> $<%-attributesArr[i][0]%>:<%-attributesArr[i][1]-%> <%}-%>
  <% for( i=0; i<belongsTosArr.length; i++ ){-%> $<%-belongsTosArr[i].foreignKey%>:Int <%}-%>
  <% for( i=0; i<hasManysArr.length; i++ ){-%> $add<%-hasManysArr[i].relationNameCp%>:[ID]<%}-%>
  ){
    add<%- nameCp -%>(
    <% for ( i=0; i<attributesArr.length; i++ ){-%> <%-attributesArr[i][0]%>:$<%-attributesArr[i][0]-%>  <%}-%>
    <% for( i=0; i<belongsTosArr.length; i++ ){-%> <%-belongsTosArr[i].foreignKey%>:$<%-belongsTosArr[i].foreignKey%> <%}-%>
    <% for( i=0; i<hasManysArr.length; i++ ){-%> add<%-hasManysArr[i].relationNameCp%>:$add<%-hasManysArr[i].relationNameCp%> <%}-%>
    ){id <% for ( i=0; i<attributesArr.length; i++ ) {-%> <%- attributesArr[i][0] %>  <%}-%> }
  }
  `
  return requestGraphql({url, query, variables, token});
},


  readOne<%- nameCp -%> : function({url, variables, token}){
    let query = `query readOne<%- nameCp -%>($id:ID!){
      readOne<%- nameCp -%>(id:$id){id <% for ( i=0; i<attributesArr.length; i++ ) {-%> <%- attributesArr[i][0] %>  <%}-%>
      <% for( i=0; i<belongsTosArr.length; i++ ){-%> <%-belongsTosArr[i].relationName%>{ <%-belongsTosArr[i].label%>
        <%if(belongsTosArr[i].sublabel){%> <%-belongsTosArr[i].sublabel-%> <%}-%> } <%}-%>
      <% for( i=0; i<hasManysArr.length; i++ ){-%> countFiltered<%-hasManysArr[i].relationNameCp%> <%}-%>
    }
    }`
    return requestGraphql({url, query, variables, token});
  },

  update : function({url, variables, token}){
    let query = `mutation update<%- nameCp -%>($id:ID!
    <% for ( i=0; i<attributesArr.length; i++ ){-%> $<%-attributesArr[i][0]%>:<%-attributesArr[i][1]-%> <%}-%>
    <% for( i=0; i<belongsTosArr.length; i++ ){-%> $<%-belongsTosArr[i].foreignKey%>:Int <%}-%>
    <% for( i=0; i<hasManysArr.length; i++ ){-%> $add<%-hasManysArr[i].relationNameCp%>:[ID] $remove<%-hasManysArr[i].relationNameCp%>:[ID] <%}-%>
    ){
      update<%- nameCp -%>(id:$id
      <% for ( i=0; i<attributesArr.length; i++ ){-%> <%-attributesArr[i][0]%>:$<%-attributesArr[i][0]-%>  <%}-%>
      <% for( i=0; i<belongsTosArr.length; i++ ){-%> <%-belongsTosArr[i].foreignKey%>:$<%-belongsTosArr[i].foreignKey%> <%}-%>
      <% for( i=0; i<hasManysArr.length; i++ ){-%> add<%-hasManysArr[i].relationNameCp%>:$add<%-hasManysArr[i].relationNameCp%> remove<%-hasManysArr[i].relationNameCp%>:$remove<%-hasManysArr[i].relationNameCp%> <%}-%>
      ){id <% for ( i=0; i<attributesArr.length; i++ ) {-%> <%- attributesArr[i][0] %>  <%}-%>}
    }`

    return requestGraphql({url, query, variables, token});
  },

  delete<%- nameCp -%> : function({url, variables, token}){
    let query = `mutation delete<%- nameCp -%>($id:ID!){
      delete<%- nameCp -%>(id:$id)
    }`
    return requestGraphql({url, query, variables, token});
  },

  //simple queries needed in spa components

  vueTable: `{vueTable<%-nameCp-%>{data {id <% for( i=0; i<attributesArr.length; i++ ){-%> <%-attributesArr[i][0] %> <%}-%>
<%for( i=0; i<belongsTosArr.length; i++ ){-%>
<%let bt = belongsTosArr[i]-%>
<%- bt.relationName %>{<%-bt.label-%> <%if(bt.sublabel){-%> <%-bt.sublabel %> <%}-%>}<%}-%>
<%for(i=0; i<hasManysArr.length; i++){-%>
<%let manyRel = hasManysArr[i]-%>
countFiltered<%-manyRel.relationNameCp-%> <%}-%>
} total per_page current_page last_page prev_page_url next_page_url from to}}`,

  getAll: function(label, sublabel){
    return `query
    <%- namePl -%>($search: search<%- nameCp -%>Input $pagination: paginationInput)
   {<%- namePl -%>(search:$search pagination:$pagination){id ${label} ${sublabel} } }`
  },

  getOne: function(subQuery,label, sublabel){
    return `query readOne<%- nameCp -%>($id: ID!, $offset:Int, $limit:Int) {
      readOne<%- nameCp -%>(id:$id){ ${subQuery}(pagination:{limit: $limit offset:$offset }){ id ${label} ${sublabel} } } }`
  }

}
