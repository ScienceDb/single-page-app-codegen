import requestGraphql from './request'

export default {

  create : function({url, variables, token}){
  let query = ` mutation add<%- nameCp -%>(
  <% for ( i=0; i<attributesArr.length; i++ ){-%> $<%-attributesArr[i][0]%>:<%-attributesArr[i][1]-%> <%}-%>
  <% for( i=0; i<belongsTosArr.length; i++ ){-%> $<%-belongsTosArr[i].foreignKey%>:Int <%}-%>
  <% for( i=0; i<hasManysArr.length; i++ ){-%> $add<%-hasManysArr[i].relationNameCp%>:[ID]<%}-%>
  ){
    add<%- nameCp -%>(
    <% for ( i=0; i<attributesArr.length; i++ ){-%> <%-attributesArr[i][0]%>:$<%-attributesArr[i][0]-%>  <%}-%>
    <% for( i=0; i<belongsTosArr.length; i++ ){-%> <%-belongsTosArr[i].foreignKey%>:$<%-belongsTosArr[i].foreignKey%> <%}-%>
    <% for( i=0; i<hasManysArr.length; i++ ){-%> add<%-hasManysArr[i].relationNameCp%>:$add<%-hasManysArr[i].relationNameCp%> <%}-%>
    ){id <% for ( i=0; i<attributesArr.length; i++ ) {-%> <%- attributesArr[i][0] %>  <%}-%> }
  }
  `
  return requestGraphql({url, query, variables, token});
},


  readOne<%- nameCp -%> : function({url, variables, token}){
    let query = `query readOne<%- nameCp -%>($id:ID!){
      readOne<%- nameCp -%>(id:$id){id <% for ( i=0; i<attributesArr.length; i++ ) {-%> <%- attributesArr[i][0] %>  <%}-%>
      <% for( i=0; i<belongsTosArr.length; i++ ){-%> <%-belongsTosArr[i].relationName%>{ <%-belongsTosArr[i].label%>
        <%if(belongsTosArr[i].sublabel){%> <%-belongsTosArr[i].sublabel-%> <%}-%> } <%}-%>
      <% for( i=0; i<hasManysArr.length; i++ ){-%> countFiltered<%-hasManysArr[i].relationNameCp%> <%}-%>
    }
    }`
    return requestGraphql({url, query, variables, token});
  },

  update : function({url, variables, token}){
    let query = `mutation update<%- nameCp -%>($id:ID!
    <% for ( i=0; i<attributesArr.length; i++ ){-%> $<%-attributesArr[i][0]%>:<%-attributesArr[i][1]-%> <%}-%>
    <% for( i=0; i<belongsTosArr.length; i++ ){-%> $<%-belongsTosArr[i].foreignKey%>:Int <%}-%>
    <% for( i=0; i<hasManysArr.length; i++ ){-%> $add<%-hasManysArr[i].relationNameCp%>:[ID] $remove<%-hasManysArr[i].relationNameCp%>:[ID] <%}-%>
    ){
      update<%- nameCp -%>(id:$id
      <% for ( i=0; i<attributesArr.length; i++ ){-%> <%-attributesArr[i][0]%>:$<%-attributesArr[i][0]-%>  <%}-%>
      <% for( i=0; i<belongsTosArr.length; i++ ){-%> <%-belongsTosArr[i].foreignKey%>:$<%-belongsTosArr[i].foreignKey%> <%}-%>
      <% for( i=0; i<hasManysArr.length; i++ ){-%> add<%-hasManysArr[i].relationNameCp%>:$add<%-hasManysArr[i].relationNameCp%> remove<%-hasManysArr[i].relationNameCp%>:$remove<%-hasManysArr[i].relationNameCp%> <%}-%>
      ){id <% for ( i=0; i<attributesArr.length; i++ ) {-%> <%- attributesArr[i][0] %>  <%}-%>}
    }`

    return requestGraphql({url, query, variables, token});
  },

  delete<%- nameCp -%> : function({url, variables, token}){
    let query = `mutation delete<%- nameCp -%>($id:ID!){
      delete<%- nameCp -%>(id:$id)
    }`
    return requestGraphql({url, query, variables, token});
  },

  tableTemplate: function({url}){
    let query = `query {csvTableTemplate<%- nameCp -%> }`

    return requestGraphql({url,query});
  },

  //simple queries needed in spa components

  vueTable: `{vueTable<%-nameCp-%>{data {id <% for( i=0; i<attributesArr.length; i++ ){-%> <%-attributesArr[i][0] %> <%}-%>
<%for( i=0; i<belongsTosArr.length; i++ ){-%>
<%let bt = belongsTosArr[i]-%>
<%- bt.relationName %>{<%-bt.label-%> <%if(bt.sublabel){-%> <%-bt.sublabel %> <%}-%>}<%}-%>
<%for(i=0; i<hasManysArr.length; i++){-%>
<%let manyRel = hasManysArr[i]-%>
countFiltered<%-manyRel.relationNameCp-%> <%}-%>
} total per_page current_page last_page prev_page_url next_page_url from to}}`,

  getAll: function(label, sublabel){
    return `query
    <%- namePl -%>($search: search<%- nameCp -%>Input $pagination: paginationInput)
   {<%- namePl -%>(search:$search pagination:$pagination){id ${label} ${sublabel} } }`
  },

  getOne: function(subQuery,label, sublabel){
    return `query readOne<%- nameCp -%>($id: ID!, $offset:Int, $limit:Int) {
      readOne<%- nameCp -%>(id:$id){ ${subQuery}(pagination:{limit: $limit offset:$offset }){ id ${label} ${sublabel} } } }`
  },

  /*
    @v-data-table support
  */
  //get item count
  getCount: function(url, searchText){
    /*
      Set @search arg
    */
   var s = '';
   var query = '';

   if(searchText !== null && searchText !== '') 
   {
      s = `search: {operator:or, search: [ 
        <% for ( i=0; i<attributesArr.length; i++ ) { -%>
          {field:<%- attributesArr[i][0] -%>, value:{value:"%${searchText}%"}, operator:like}, 
        <% } -%>
      ]}`
      //query with search
      query = `{ count<%- namePlCp -%>(${s}) }`;
   }
   else {
      //query without search
      query =`{ count<%- namePlCp -%> }`;
   }

   return requestGraphql({url,query});
  },

  getItems: function(url, searchText, sortBy, sortDesc, paginationOffset, paginationLimit){
    /*
      Set search
    */
    var s = null;
    if(searchText !== null && searchText !== '')
    {
        s = `search: {operator:or, search: [
          <% for ( i=0; i<attributesArr.length; i++ ) { -%>
            {field:<%- attributesArr[i][0] -%>, value:{value:"%${searchText}%"}, operator:like}, 
          <% } -%>
        ]}`
    }
    /*
      Set order
    */
    var o = null;
    if(sortBy.length > 0)
    {
        /*
          Add sort fields
        */
        o = `order: [`;
        for(var i=0; i<sortBy.length; i++)
        {
          //ser order
          var order = 'ASC';
          if(sortDesc[i])
          {
            order = 'DESC'
          }
          
          //add sort field
          o = o + `{field: ${sortBy[i]}, order: ${order}}`
        }
        o = o + `]`
    }

    /*
      Set pagination
    */
    var p = `pagination: {offset: ${paginationOffset}, limit: ${paginationLimit}}`

    /*
      Set graphQL query
    */
    var query = '';

    //if has search
    if(s !== null)
    {
      //if has order
      if(o != null)
      {
        //query with search & sort & pagination
        query = 
        `{
          <%- namePlLc -%>(${s}, ${o}, ${p}) {
                    id
                <% for ( i=0; i<attributesArr.length; i++ ) { -%>
                    <%- attributesArr[i][0] -%> 
                <% } -%>
                }
        }`
      }//end: if has order
      else { //has not order
        
        //query with search & pagination
        query = 
        `{
          <%- namePlLc -%>(${s}, ${p}) {
                    id
                <% for ( i=0; i<attributesArr.length; i++ ) { -%>
                    <%- attributesArr[i][0] -%> 
                <% } -%>
                }
        }`
      }//end: else: has not order
    }//end: if has search
    else { // has not search
      
      //if has order
      if(o != null)
      {
        //query with sort & pagination
        query = 
        `{
          <%- namePlLc -%>(${o}, ${p}) {
                    id
                <% for ( i=0; i<attributesArr.length; i++ ) { -%>
                    <%- attributesArr[i][0] -%> 
                <% } -%>
                }
        }`
      }//end: if has order
      else { //has not order
        
        //query with pagination only
        query = 
        `{
          <%- namePlLc -%>(${p}) {
                    id
                <% for ( i=0; i<attributesArr.length; i++ ) { -%>
                    <%- attributesArr[i][0] -%> 
                <% } -%>
                }
        }`
      }//end: else: has not order
    }//end: else: has not search

    return requestGraphql({url,query});
  }

}
