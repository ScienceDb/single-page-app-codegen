/**
 * Root query
 * ----------
 */

  /**
   * getCountItems
   *
   * Get <%- namePlLc _%> items count from GraphQL Server.
   * (root query)
   *
   * @param {String} url GraphQL Server url
   * @param {String} searchText Text string currently on search bar.
   * @param {String} ops Object with adittional query options.
   */
  async getCountItems(url, searchText, ops) {
    let variables = {};
    //search
    let s = getSearchArgument('<%- nameLc _%>', searchText, ops, 'object');
    if(s) variables.search = s.search;

    //query
    let attributes = getAttributes('<%- nameLc _%>');
    let qattributes = Object.keys(attributes).join();
    let query =
      `query count<%- namePlCp _%>($search: search<%- nameCp _%>Input) { 
             count<%- namePlCp _%>( search: $search ) }`
    /**
     * Debug
     */
    if(globals.REQUEST_LOGGER) logRequest('getCountItems', query, variables);

    //request
    let response = await requestGraphql({ url, query, variables });
    let count = null;
    //check
    check = checkResponse(response, graphqlErrors, "count<%- namePlCp _%>");
    if(check === 'ok') {
      //check type
      if(!Number.isInteger(response.data.data["count<%- namePlCp _%>"])) 
      return {data: response.data.data, value: null, message: 'bad_type', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

      //get value
      count = response.data.data["count<%- namePlCp _%>"];
    } else return {data: response.data.data, value: null, message: check, graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

    //return value
    return {value: count, message: 'ok', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
  },