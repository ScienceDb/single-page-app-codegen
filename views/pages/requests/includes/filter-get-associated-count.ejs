/**
 * Filter
 * ------
 */

<%_if( sortedAssociations[aindex].type === 'to_many' || sortedAssociations[aindex].type === 'to_many_through_sql_cross_table' || sortedAssociations[aindex].type === 'generic_to_many' ){-%>
  /**
   * get<%- sortedAssociations[aindex].relationNameCp %>Count
   * 
   * Get <%- sortedAssociations[aindex].targetModelPlLc %> records count associated to the given <%- nameLc %> record
   * through association '<%- sortedAssociations[aindex].relationNameCp %>', from GraphQL Server.
   * 
   * 
   * @param {String} url GraphQL Server url
   * @param {Number} itemId Model item internalId.
   * @param {String} searchText Text string currently on search bar.
   * @param {String} ops Object with adittional query options.
   */
  async get<%- sortedAssociations[aindex].relationNameCp %>Count(url, itemId, searchText, ops) {
    let graphqlErrors = [];

    let variables = {"<%- internalId _%>": itemId};
    //search
    let s = getSearchArgument('<%- sortedAssociations[aindex].targetModelLc _%>', searchText, ops, 'object');
    if(s) variables.search = s.search;
    //query
    let query =
      `query readOne<%- nameCp _%>($<%- internalId _%>:ID!, $search: search<%- sortedAssociations[aindex].targetModelCp _%>Input) { 
             readOne<%- nameCp _%>(<%- internalId _%>:$<%- internalId _%>) {
              countFiltered<%- sortedAssociations[aindex].relationNameCp %>(search: $search) 
       }}`

    /**
     * Debug
     */
    if(globals.REQUEST_LOGGER) logRequest('get<%- sortedAssociations[aindex].relationNameCp %>Count', query, variables);
    
    //request
    let response = await requestGraphql({ url, query, variables });
    let count = null;
    //check
    let check = checkResponse(response, graphqlErrors, "readOne<%- nameCp _%>");
    if(check === 'ok') {
      //check type
      if(!response.data.data["readOne<%- nameCp _%>"]
      || typeof response.data.data["readOne<%- nameCp _%>"] !== 'object'
      || !Number.isInteger(response.data.data["readOne<%- nameCp _%>"]["countFiltered<%- sortedAssociations[aindex].relationNameCp %>"])) 
      return {data: response.data.data, value: null, message: 'bad_type', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

      //get value
      count = response.data.data["readOne<%- nameCp _%>"]["countFiltered<%- sortedAssociations[aindex].relationNameCp %>"];
    } else return {data: response.data.data, value: null, message: check, graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

    //return value
    return {value: count, message: 'ok', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
  },
<%}-%>