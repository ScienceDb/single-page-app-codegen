
/**
 * Filter:
 *  Get associated <%- sortedAssociations[aindex].relationNameCp %> items
 *  
 */

  /**
   * get<%- sortedAssociations[aindex].relationNameCp _%>
   *
   * Get <%- sortedAssociations[aindex].targetModelPlLc %> records associated to the given <%- nameLc %> record
   * through association '<%- sortedAssociations[aindex].relationNameCp %>', from GraphQL Server.
   *
   *
   * @param {String} url GraphQL Server url
   * @param {Number} itemId Model item internalId.
   * @param {String} searchText Text string currently on search bar.
   * @param {Object} variables Object with cursor-based-pagination variables.
   * @param {String} ops Object with adittional query options.
   */
  get<%- sortedAssociations[aindex].relationNameCp _%>(url, itemId, searchText, variables, ops) {
    //set attributes
    let qattributes = 
    `<%- sortedAssociations[aindex].internalId _%>,
<%_for( let j=0; j<modelsAtts[sortedAssociations[aindex].targetModel].length; j++ ){
  if(modelsAtts[sortedAssociations[aindex].targetModel][j][0] !== sortedAssociations[aindex].internalId) {
-%>
     <%- modelsAtts[sortedAssociations[aindex].targetModel][j][0] -%>,
<%}}-%>`;

<%#
/**
 * to_one
 * generic_to_one
 */
-%>
 <%_if( sortedAssociations[aindex].type === 'to_one' || sortedAssociations[aindex].type === 'generic_to_one' ){-%>
    variables["<%- internalId _%>"] = itemId;
    //set query
    let query = 
      `query readOne<%- nameCp _%>($<%- internalId _%>:ID!) {
             readOne<%- nameCp _%>(<%- internalId _%>:$<%- internalId _%>) {
                <%- sortedAssociations[aindex].relationName _%> {
                  ${qattributes}
                }
             }}`;
    /**
     * Debug
     */
    if(globals.REQUEST_LOGGER) logRequest('get<%- sortedAssociations[aindex].relationNameCp _%>', query, variables);
    return requestGraphql({ url, query, variables });
  },
<%}-%>
<%#
  /**
   * to_many
   * to_many_through_sql_cross_table
   * generic_to_many
   */
-%>
<%_if( sortedAssociations[aindex].type === 'to_many' || sortedAssociations[aindex].type === 'to_many_through_sql_cross_table' || sortedAssociations[aindex].type === 'generic_to_many' ){-%>
    variables["<%- internalId _%>"] = itemId;
    //set search
    let s = getSearchArgument('<%- sortedAssociations[aindex].targetModelLc _%>', searchText, ops, 'object');
    if(s) variables.search = s.search;
<%#
  /**
   * limitOffset
   */
-%>
<%if(sortedAssociations[aindex].paginationType === 'limitOffset') {-%>
    //set query
    let query = 
      `query readOne<%- nameCp _%>($<%- internalId _%>:ID!, $search: search<%- sortedAssociations[aindex].targetModelCp _%>Input, $pagination: paginationCursorInput) {
             readOne<%- nameCp _%>(<%- internalId _%>:$<%- internalId _%>) {
                <%- sortedAssociations[aindex].relationNameLc _%>Filter(search: $search, pagination: $pagination) {
                  ${qattributes}
                }
             }}`;
<%}-%>
<%#
  /**
   * cursorBased
   */
-%>
<%if(sortedAssociations[aindex].paginationType === 'cursorBased'){-%>
    let qbody = `
          pageInfo {startCursor, endCursor, hasPreviousPage, hasNextPage},
          edges {
            node {
              ${qattributes}
            }
          }`;

    let query =
      `query readOne<%- nameCp %>($<%- internalId _%>:ID!, $search: search<%- sortedAssociations[aindex].targetModelCp _%>Input, $pagination: paginationCursorInput) {
             readOne<%- nameCp _%>(<%- internalId _%>:$<%- internalId _%>) {
                <%- sortedAssociations[aindex].relationNameLc _%>Connection(search: $search, pagination: $pagination) {
                  ${qbody},
                },
             }}`;
<%}-%>
    /**
     * Debug
     */
    if(globals.REQUEST_LOGGER) logRequest('get<%- sortedAssociations[aindex].relationNameCp _%>', query, variables);
    return requestGraphql({ url, query, variables });
  },
<%}-%>
