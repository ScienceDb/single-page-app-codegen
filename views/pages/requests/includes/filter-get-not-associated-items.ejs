/**
 * Filter
 * ------
 */

/**
 * getNotAssociated<%- sortedAssociations[aindex].relationNameCp %>
 *
 * Get not associated <%- sortedAssociations[aindex].relationNameCp %> items from GraphQL Server.
 *
 * @param {String} url GraphQL Server url.
 * @param {String} itemId Model item internalId.
 * @param {String} searchText Text string currently on search bar.
 * @param {Object} variables Object with cursor-based-pagination variables.
 * @param {String} ops Object with additional query options.
 * @param {Int}    batchSize Max number of records to fetch in batch from GraphQL Server.
 */
async getNotAssociated<%- sortedAssociations[aindex].relationNameCp %>(url, itemId, searchText, variables, ops, batchSize) {
<%_if( sortedAssociations[aindex].type !== 'to_one' && sortedAssociations[aindex].type !== 'generic_to_one' ){-%>
    //internal checks
    if(!variables||typeof variables !== 'object') throw new Error("internal_error: expected object 'variables' argument");
    if(!variables.pagination||typeof variables.pagination !== 'object' ) throw new Error("internal_error: pagination object expected in variables");
<%}-%>
<%_if( sortedAssociations[aindex].type === 'to_many' ){-%>
<%if(sortedAssociations[aindex].paginationType === 'cursorBased') {-%>
    if(!variables.pagination.first&&!variables.pagination.last ) throw new Error("internal_error: pagination first or last positive argument expected");
<%}-%>
<%if(sortedAssociations[aindex].paginationType === 'limitOffset') {-%>
    if(!variables.pagination.limit) throw new Error("internal_error: pagination limit positive argument expected");
<%}-%>
<%}-%>
<%if( sortedAssociations[aindex].type === 'to_many_through_sql_cross_table' || sortedAssociations[aindex].type === 'generic_to_many' ) {-%>
    if(!variables.pagination.first&&!variables.pagination.last ) throw new Error("internal_error: pagination first or last positive argument expected");
<%}-%>
  let graphqlErrors = [];

  //set attributes
  let qattributes = 
    `<%- sortedAssociations[aindex].internalId _%>,
<%_for( let j=0; j<modelsAtts[sortedAssociations[aindex].targetModel].length; j++ ){
  if(modelsAtts[sortedAssociations[aindex].targetModel][j][0] !== sortedAssociations[aindex].internalId) {
-%>
     <%- modelsAtts[sortedAssociations[aindex].targetModel][j][0] -%>,
<%}}-%>`;
<%#
  /**
   * to_one
   * generic_to_one
   */
-%>
<%_if( sortedAssociations[aindex].type === 'to_one' || sortedAssociations[aindex].type === 'generic_to_one' ){-%>
    /**
     * Algorithm:
     *    1. get associated item id.
     *    2. get all items exluding associated item if there is one.
     *    3: @return filtered items.
     * 
     */
  
    /**
     *    1. get associated item id.
     * 
     */
    variables = {"<%- internalId _%>": itemId};
    let query = 
      `query readOne<%- nameCp _%>($<%- internalId _%>:ID!) {
             readOne<%- nameCp _%>(<%- internalId _%>:$<%- internalId _%>) {
                <%- sortedAssociations[aindex].relationName _%> {
                  <%- sortedAssociations[aindex].internalId _%>
                }
             }}`;
     /**
     * Debug
     */
    if(globals.REQUEST_LOGGER) logRequest('getNotAssociated<%- sortedAssociations[aindex].relationNameCp %>.query1', query, variables);
    //request
    let response = await requestGraphql({ url, query, variables });
    let associatedItem = null;
    //check
    let check = checkResponse(response, graphqlErrors, "readOne<%- nameCp _%>");
    if(check === 'ok') {
      //check types
      if(!response.data.data["readOne<%- nameCp _%>"]
      || typeof response.data.data["readOne<%- nameCp _%>"] !== 'object'
      || typeof response.data.data["readOne<%- nameCp _%>"]["<%- sortedAssociations[aindex].relationName _%>"] !== 'object' //can be null
      ) return {data: response.data.data, value: null, message: 'bad_type', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
      
      //get value
      associatedItem = response.data.data["readOne<%- nameCp _%>"]["<%- sortedAssociations[aindex].relationName _%>"];
    } else return {data: response.data.data, value: null, message: check, graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

    /**
     *    2. get all items exluding associated item if there is one.
     * 
     */
    variables = {};
    //make filter to exclude associated item
    let f1 = null;
    if(associatedItem) f1 = {field: "<%- sortedAssociations[aindex].internalId _%>", valueType: "<%- sortedAssociations[aindex].internalIdType _%>", value: associatedItem["<%- sortedAssociations[aindex].internalId _%>"], operator: "ne"};

    //search
    let s = getSearchArgument('<%- sortedAssociations[aindex].targetModelLc _%>', searchText, ops, 'object');
    if(s) {
      //add new filter to ands array
      if(f1) s.search.search.push(f1); 
      //set search
      variables.search = s.search;
    } else {
      if(f1) {
        //add new filter search
        s = {search: f1};        
        //set search
        variables.search = s.search;
      }
    }
<%#
  /**
   * limitOffset
   */
-%>
<%if(sortedAssociations[aindex].paginationType === 'limitOffset') {-%>
    //set query
    query = 
      `query <%- sortedAssociations[aindex].targetModelPlLc _%>($search: search<%- sortedAssociations[aindex].targetModelCp _%>Input, $pagination: paginationCursorInput) {
             <%- sortedAssociations[aindex].targetModelPlLc _%>(search: $search, pagination: $pagination) {
                  ${qattributes}
                }
             }`;
<%}-%>
<%#
  /**
   * cursorBased
   */
-%>
<%if(sortedAssociations[aindex].paginationType === 'cursorBased'){-%>
    //set query
    let qbody = `
          pageInfo {startCursor, endCursor, hasPreviousPage, hasNextPage},
          edges {
            node {
              ${qattributes}
            }
          }`;
    query =
      `query <%- sortedAssociations[aindex].targetModelPlLc _%>Connection($search: search<%- sortedAssociations[aindex].targetModelCp _%>Input, $pagination: paginationCursorInput) {
             <%- sortedAssociations[aindex].targetModelPlLc _%>Connection(search: $search, pagination: $pagination) {
                  ${qbody},
                },
             }`;
<%}-%>
    /**
     * Debug
     */
    if(globals.REQUEST_LOGGER) logRequest('getNotAssociated<%- sortedAssociations[aindex].relationNameCp %>.query2', query, variables);

    //request
    response = await requestGraphql({ url, query, variables });
    let items = null;
<%if(sortedAssociations[aindex].paginationType === 'limitOffset') {-%>
    //check
    check = checkResponse(response, graphqlErrors, "<%- sortedAssociations[aindex].targetModelPlLc _%>");
    if(check === 'ok') {
      //check type
      if(!Array.isArray(response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>"])) 
      return {data: response.data.data, value: null, message: 'bad_type', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

      //get value
      items = response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>"];
    } else return {data: response.data.data, value: null, message: check, graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
<%} else if(sortedAssociations[aindex].paginationType === 'cursorBased') {-%>
    //check
    check = checkResponse(response, graphqlErrors, "<%- sortedAssociations[aindex].targetModelPlLc _%>Connection");
    if(check === 'ok') {
      //check type
      if(!response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"]
      || typeof response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"] !== 'object'
      || !Array.isArray(response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].edges)
      || typeof response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].pageInfo !== 'object' 
      || response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].pageInfo === null)
      return {data: response.data.data, value: null, message: 'bad_type', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

      //get value
      items = response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"];
    } else return {data: response.data.data, value: null, message: check, graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
<%}-%>

    //return value
    return {value: items, message: 'ok', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
  },
<%}-%>
<%
/**
 * to_many
 */
-%>
<%_if( sortedAssociations[aindex].type === 'to_many' ){-%>
    /**
     * Algorithm:
     *    1. get a filtered items.
     *       filters:
     *          1.1: exclude itemId in association.targetKey field.
     *          1.2: include null values in association.targetKey field.  
     *    2. @return filtered items. 
     */
    //search
    let s = getSearchArgument('<%- sortedAssociations[aindex].targetModelLc _%>', searchText, ops, 'object');
  
    //make filter to exclude itemId on FK & include null's
    let f1 = {field: "<%- sortedAssociations[aindex].targetKey _%>", valueType: "<%- internalIdType _%>", value: itemId, operator: "ne"};
    let f2 = {field: "<%- sortedAssociations[aindex].targetKey _%>", valueType: "<%- internalIdType _%>", value: null, operator: "eq"};
    let nf = {operator: "or", search: [ f1, f2 ]};
    
    //add new filter to ands array
    if(s) s.search.search.push(nf);
    else  s = {search: nf};

    //set search
    variables.search = s.search;
<%#
  /**
   * limitOffset
   */
-%>
<%if(sortedAssociations[aindex].paginationType === 'limitOffset') {-%>
    //set query
    let query = 
      `query <%- sortedAssociations[aindex].targetModelPlLc _%>($search: search<%- sortedAssociations[aindex].targetModelCp _%>Input, $pagination: paginationCursorInput) {
             <%- sortedAssociations[aindex].targetModelPlLc _%>(search: $search, pagination: $pagination) {
                  ${qattributes}
                }
             }`;
<%}-%>
<%#
  /**
   * cursorBased
   */
-%>
<%if(sortedAssociations[aindex].paginationType === 'cursorBased'){-%>
    //set query
    let qbody = `
          pageInfo {startCursor, endCursor, hasPreviousPage, hasNextPage},
          edges {
            node {
              ${qattributes}
            }
          }`;
    let query =
      `query <%- sortedAssociations[aindex].targetModelPlLc _%>Connection($search: search<%- sortedAssociations[aindex].targetModelCp _%>Input, $pagination: paginationCursorInput) {
             <%- sortedAssociations[aindex].targetModelPlLc _%>Connection(search: $search, pagination: $pagination) {
                  ${qbody},
                },
             }`;
<%}-%>
    /**
     * Debug
     */
    if(globals.REQUEST_LOGGER) logRequest('getNotAssociated<%- sortedAssociations[aindex].relationNameCp %>', query, variables);

    //request
    let response = await requestGraphql({ url, query, variables });
    let items = null;
<%if(sortedAssociations[aindex].paginationType === 'limitOffset') {-%>
    //check
    let check = checkResponse(response, graphqlErrors, "<%- sortedAssociations[aindex].targetModelPlLc _%>");
    if(check === 'ok') {
        //check type
        if(!Array.isArray(response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>"])) 
        return {data: response.data.data, value: null, message: 'bad_type', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

        //get value
        items = response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>"];
    } else return {data: response.data.data, value: null, message: check, graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
<%} else if(sortedAssociations[aindex].paginationType === 'cursorBased') {-%>
    //check
    let check = checkResponse(response, graphqlErrors, "<%- sortedAssociations[aindex].targetModelPlLc _%>Connection");
    if(check === 'ok') {
      //check type
      if(!response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"]
      || typeof response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"] !== 'object'
      || !Array.isArray(response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].edges)
      || typeof response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].pageInfo !== 'object' 
      || response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].pageInfo === null)
      return {data: response.data.data, value: null, message: 'bad_type', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

      //get value
      items = response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"];
    } else return {data: response.data.data, value: null, message: check, graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
<%}-%>

    //return value
    return {value: items, message: 'ok', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
  },
<%}-%>
<%#
/**
 * to_many_through_sql_cross_table
 * generic_to_many
 * 
 * For these cases, only cursor-based pagination is supported.
 */
-%>
<%_if( sortedAssociations[aindex].type === 'to_many_through_sql_cross_table' || sortedAssociations[aindex].type === 'generic_to_many' ){-%>
  /**
   * Recursive fetch of not associated items algorithm (cursor-based-pagination):
   *  1 Until @requiredItems are fetched, do:
   *    1.2 Get @requiredItems ( equal to @first or @last ) minus lenght.of( @notAssociatedItems already fetched) items, 
   *        where each item will be fetched with the correspondent associationConnection, which in turn will be 
   *        filtered by the current itemId. The resulting associationConnection will contain a non-empty edges-array if
   *        the current item is associated or an empty edges-array otherwise.
   *    1.3 Join fetched items in 1.2 with previous ones if any: in @notAssociatedItemsEdges array.
   *        Only the items with an empty edges-array in its associationConnection will be added.
   *    1.4 Check number of fetched items:
   *        1.4.1  If: fetched items are less than the requested number of items in 1.2 and there are more items:
   *               1.4.1.1 Adjust pagination to get the next batch of items.
   *               1.4.1.2 @continue with next iteration.
   *        1.4.2  Else: fetched items are equal to the requested number of items in 1.2 or there are no more items: 
   *               1.4.2.1 Return Connection with edges and pageInfo properly configured.  
   *               1.4.2.2 @done
   */
  //set direction
  let isForward = variables.pagination.first ? true : false;
  //set required number of items
  let requiredItems = isForward ? variables.pagination.first : variables.pagination.last;

  /**
   * Initialize batch query
   * 
   */
  //pagination
  let batchPagination = {...variables.pagination, first: isForward ? batchSize : null, last: !isForward ? batchSize : null};
  //search
  let batchSearch = getSearchArgument('<%- sortedAssociations[aindex].targetModelLc _%>', searchText, ops, 'object');
  //variables
  let batchVariables = {"<%- internalId _%>": itemId, pagination: batchPagination};
  if(batchSearch) batchVariables.search = batchSearch.search;
  
  let batchQuery = 
        `query <%- sortedAssociations[aindex].targetModelPlLc _%>Connection($<%- internalId _%>:ID!, $search: search<%- sortedAssociations[aindex].targetModelCp _%>Input, $pagination: paginationCursorInput) {
               <%- sortedAssociations[aindex].targetModelPlLc _%>Connection(search: $search, pagination: $pagination) {
                  pageInfo {startCursor endCursor hasPreviousPage hasNextPage}
                  edges {node {
                    ${qattributes}
                    <%- sortedAssociations[aindex].peerAssociationNameLc _%>Connection(
                      search: {field: <%- internalId _%>, value: $<%- internalId _%>, valueType: <%- internalIdType _%>, operator: eq },
                      pagination: {first: 1}){ edges {node {<%- internalId _%> }}}
          }}}}`;

  //initialize results
  let nonaPageInfo = {startCursor: null, endCursor: null, hasPreviousPage: false, hasNextPage: false};
  let nonaEdges = [];

  //batch counter
  let iteration = 1;
  
   /**
   * Recursive fetch of not associated items algorithm (cursor-based-pagination):
   *  1 Until @requiredItems are fetched, do:
   * 
   */
  while(nonaEdges.length < requiredItems) {    
    /**
     *    1.2 Get @requiredItems ( equal to @first or @last ) minus lenght.of( @notAssociatedItems already fetched) items, 
     *        where each item will be fetched with the correspondent associationConnection, which in turn will be 
     *        filtered by the current itemId. The resulting associationConnection will contain a non-empty edges-array if
     *        the current item is associated or an empty edges-array otherwise.
     * 
     */
    /**
     * Debug
     */
    if(globals.REQUEST_LOGGER) logRequest(`getNotAssociated<%- sortedAssociations[aindex].relationNameCp %>.batch.${iteration}`, batchQuery, batchVariables);

    //request
    let response = await requestGraphql({ url, query:batchQuery, variables:batchVariables });
    let batchConnection = null;
    //check
    let check = checkResponse(response, graphqlErrors, "<%- sortedAssociations[aindex].targetModelPlLc _%>Connection");
    if(check === 'ok') {
      //check type
      if(!response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"]
      || typeof response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"] !== 'object'
      || !Array.isArray(response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].edges)
      || typeof response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].pageInfo !== 'object'
      || response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].pageInfo === null)
      return {data: response.data.data, value: null, message: 'bad_type', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

      //get value
      batchConnection = response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"];
    } else return {data: response.data.data, value: null, message: check, graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
    
    /**
     *    1.3 Join fetched items in 1.2 with previous ones if any: in @notAssociatedItemsEdges array.
     *        Only the items with an empty edges-array in its associationConnection will be added.
     * 
     */
    //get all not associated in current batch
    let batchEdges = [];
    for(let i=0; (i<batchConnection.edges.length && nonaEdges.length<requiredItems); i++) {          
        //check: not associated item
        if(batchConnection.edges[i].node["<%- sortedAssociations[aindex].peerAssociationNameLc _%>Connection"].edges.length === 0) {
        
          //new non-associated edge
          let edge = {...batchConnection.edges[i]};

          //push new edge
          batchEdges.push(edge);
        }
    }
    let thereAreMoreNonaItems = (batchEdges.length > (requiredItems - nonaEdges.length));

    if(batchEdges.length > 0) { //if there are new non-associated items... 
      //adjust pageInfo (start)
      if(nonaEdges.length === 0) {
        if(isForward) {
          nonaPageInfo.startCursor = batchEdges[0].cursor;
          nonaPageInfo.hasPreviousPage = batchConnection.pageInfo.hasPreviousPage;
        } else {
          nonaPageInfo.endCursor = batchEdges[batchEdges.length-1].cursor;
          nonaPageInfo.hasNextPage = batchConnection.pageInfo.hasNextPage;
        }
      } 
      //join new items
      if(isForward) nonaEdges = [...nonaEdges, ...batchEdges.slice(0, (requiredItems - nonaEdges.length)) ];
      else          nonaEdges = [...batchEdges.slice(-(requiredItems - nonaEdges.length)), ...nonaEdges ];
    }

    /**
     *    1.4 Check number of fetched items:
     *        1.4.1  If: fetched items are less than the requested number of items in 1.2 and there are more items:
     *               1.4.1.1 Adjust pagination to get the next batch of items.
     *               1.4.1.2 @continue with next iteration.
     *        1.4.2  Else: fetched items are equal to the requested number of items in 1.2 or there are no more items: 
     *               1.4.2.1 Return Connection with edges and pageInfo properly configured.  
     *               1.4.2.2 @done
     * 
     */
    let thereAreMoreItems = isForward ? batchConnection.pageInfo.hasNextPage : batchConnection.pageInfo.hasPreviousPage;

    if(nonaEdges.length < requiredItems && thereAreMoreItems) {
      //adjust pagination for next batch associated ids
      batchPagination.after = isForward ? batchConnection.pageInfo.endCursor : null;
      batchPagination.before = !isForward ? batchConnection.pageInfo.startCursor : null;
      batchPagination.includeCursor = false;
      batchVariables.pagination = batchPagination;

      //continue with next iteration...
      iteration++;
    } else {
      
      //adjust pagination info (end)
      if(nonaEdges.length > 0) {
        if(isForward) {
          nonaPageInfo.endCursor = nonaEdges[nonaEdges.length - 1].cursor;
          nonaPageInfo.hasNextPage = batchConnection.pageInfo.hasNextPage || thereAreMoreNonaItems;
        } else {
          nonaPageInfo.startCursor = nonaEdges[0].cursor;
          nonaPageInfo.hasPreviousPage = batchConnection.pageInfo.hasPreviousPage || thereAreMoreNonaItems;
        }
      }

      //delete innerConnecton and cursor
      for(let i=0; i<nonaEdges.length; i++) {
        delete nonaEdges[i].node["<%- sortedAssociations[aindex].peerAssociationNameLc _%>Connection"];
        delete nonaEdges[i].cursor;
      }

      //return value
      return {value: {pageInfo: nonaPageInfo, edges: nonaEdges}, message: 'ok', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
    }
  }//end: while()

  /////////////////////////////
  /**
   * Alternative algorithm.
   * 
   * Fetch not associated items excluding associated ones in batches.
   */
  /////////////////////////////
  // /**
  //  * Recursive fetch of not associated items algorithm (cursor-based-pagination):
  //  *  1 Until @requiredItems are fetched, do:
  //  *    1.1 Get @batchSize associated ids.
  //  *    1.2 Get @requiredItems ( equal to @first or @last ) minus lenght.of( @notAssociatedItems already fetched) items, 
  //  *        with a search filter excluding the set of associated ids fetched at 1.1 and not exceeding the last (or first) 
  //  *        associated id in this set.
  //  *    1.3 Join fetched items in 1.2 with previous ones if any: in @notAssociatedItemsEdges array.
  //  *    1.4 Check number of items fetched:
  //  *        1.4.1  If: fetched items are less than the requested number of items in 1.2 and there are more items:
  //  *               1.4.1.1 Adjust pagination to get the next batch of associated ids and next not-associated items page.
  //  *               1.4.1.2 @continue with next iteration.
  //  *        1.4.2  Else: fetched items are equal to the requested number of items in 1.2 or there are no more items:
  //  *               1.4.2.1 Return Connection with edges and pageInfo properly configured. 
  //  *               1.4.2.2 @done
  //  */

  // //set direction
  // let isForward = variables.pagination.first ? true : false;
  // //set required number of items
  // let requiredItems = isForward ? variables.pagination.first : variables.pagination.last;
  // //set general search filters
  // let s = getSearchArgument('<%- sortedAssociations[aindex].targetModelLc _%>', searchText, ops, 'object');

  // /**
  //  * Initialize batch query
  //  * 
  //  */
  // //pagination
  // let batchPagination = {...variables.pagination, first: isForward ? batchSize : null, last: !isForward ? batchSize : null, includeCursor: false};
  // //search
  // let batchSearch = s ? {...s} : null;
  // //variables
  // let batchVariables = {"<%- internalId _%>": itemId, pagination: batchPagination};
  // if(batchSearch) batchVariables.search = batchSearch.search;
  // //query
  // let batchQuery = 
  //       `query readOne<%- nameCp _%>($<%- internalId _%>:ID!, $search: search<%- sortedAssociations[aindex].targetModelCp _%>Input, $pagination: paginationCursorInput) {
  //              readOne<%- nameCp _%>(<%- internalId _%>: $<%- internalId _%>) {
  //                 <%- sortedAssociations[aindex].relationNameLc _%>Connection( search: $search, pagination: $pagination ) {
  //                   pageInfo {startCursor endCursor hasPreviousPage hasNextPage}
  //                   edges {node {<%- sortedAssociations[aindex].internalId _%>}}
  //         }}}`;

  // /**
  //  * Initialize non-associated items query
  //  * 
  //  */
  // //pagination
  // let nonaPagination = {...variables.pagination};
  // //search
  // let nonaSearch = null; //will be set in each iteration
  // //variables
  // let nonaVariables = {pagination: nonaPagination};
  // //query
  // let nonaQuery =
  //       `query <%- sortedAssociations[aindex].targetModelPlLc _%>Connection($search: search<%- sortedAssociations[aindex].targetModelCp _%>Input, $pagination: paginationCursorInput) {
  //              <%- sortedAssociations[aindex].targetModelPlLc _%>Connection( search: $search, pagination: $pagination ) {
  //                 pageInfo {startCursor endCursor hasPreviousPage hasNextPage}
  //                 edges {node {${qattributes}}}
  //         }}`;

  // //initialize final results
  // let nonaPageInfo = {startCursor: null, endCursor: null, hasPreviousPage: false, hasNextPage: false};
  // let nonaEdges = [];

  // /**
  //  * Recursive fetch of not associated items algorithm (cursor-based-pagination):
  //  *  1 Until @requiredItems are fetched, do:
  //  * 
  //  */
  // let iteration = 1;
  // while(nonaEdges.length < requiredItems) {
  //   /**
  //    * 1.1 Get @batchSize associated ids.
  //    * 
  //    */

  //   /**
  //    * Debug
  //    */
  //   if(globals.REQUEST_LOGGER) logRequest(`getNotAssociated<%- sortedAssociations[aindex].relationNameCp %>.batch.${iteration}`, batchQuery, batchVariables);

  //   //request
  //   let response = await requestGraphql({ url, query:batchQuery, variables:batchVariables });
  //   let batchConnection = null;
  //   //check
  //   let check = checkResponse(response, graphqlErrors, "readOne<%- nameCp _%>");
  //   if(check === 'ok') {
  //     //check type
  //     if(!response.data.data["readOne<%- nameCp _%>"]
  //     || typeof response.data.data["readOne<%- nameCp _%>"] !== 'object'
  //     || response.data.data["readOne<%- nameCp _%>"]["<%- sortedAssociations[aindex].relationNameLc _%>Connection"] === null
  //     || typeof response.data.data["readOne<%- nameCp _%>"]["<%- sortedAssociations[aindex].relationNameLc _%>Connection"] !== 'object'
  //     || !Array.isArray(response.data.data["readOne<%- nameCp _%>"]["<%- sortedAssociations[aindex].relationNameLc _%>Connection"].edges)
  //     || typeof response.data.data["readOne<%- nameCp _%>"]["<%- sortedAssociations[aindex].relationNameLc _%>Connection"].pageInfo !== 'object' 
  //     || response.data.data["readOne<%- nameCp _%>"]["<%- sortedAssociations[aindex].relationNameLc _%>Connection"].pageInfo === null)
  //     return {data: response.data.data, value: null, message: 'bad_type', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

  //     //get value
  //     batchConnection = response.data.data["readOne<%- nameCp _%>"]["<%- sortedAssociations[aindex].relationNameLc _%>Connection"];
  //   } else return {data: response.data.data, value: null, message: check, graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
    
  //   //get ids to exclude
  //   let idsToExclude = batchConnection.edges.map(o => o.node.<%- sortedAssociations[aindex].internalId _%>);

  //   /**
  //    * Debug
  //    */
  //   console.log("@@-- iteration: ", iteration);
  //   console.log("@@-- requiredItems: ", requiredItems);
  //   console.log("@@-- batchConnection: ", batchConnection);
  //   console.log("@@-- idsToExclude: ", idsToExclude);

  //   /**
  //    * 1.2 Get @requiredItems ( equal to @first or @last ) minus lenght.of( @notAssociatedItems already fetched) items, 
  //    *      with a search filter excluding the set of associated ids fetched at 1.1 and not exceeding the last (or first) 
  //    *      associated id in this set.
  //    */
  //   //init with general search
  //   nonaSearch = s ? {...s} : null;
  
  //   //case: there are associated items to exclude...
  //   if(idsToExclude.length > 0) {
  //     //add exclusions
  //     let nonaOps = {
  //       exclude: [{
  //         type: '<%- sortedAssociations[aindex].internalIdType _%>',
  //         values: {"<%- sortedAssociations[aindex].internalId _%>": idsToExclude}
  //       }]
  //     };
      
  //     //set exclusion filters (ands)
  //     let nonaSearchB = getSearchArgument('<%- sortedAssociations[aindex].targetModelLc _%>', null, nonaOps, 'object');

  //     //set filter to limit results
  //     if(isForward) {
  //       //case: there are more associated ids...
  //       if(batchConnection.pageInfo.hasNextPage) {
  //         //make filter to limit results to before the last associated id.
  //         let f1 = {field: "<%- sortedAssociations[aindex].internalId _%>", valueType: <%- sortedAssociations[aindex].internalIdType _%>, value: idsToExclude[idsToExclude.length-1], operator: "lt"};
  //         //add filter
  //         nonaSearchB.search.search.push(f1);
  //       }
  //     } else { //isBackward
  //       //case: there are more associated ids...
  //       if(batchConnection.pageInfo.hasPreviousPage) {
  //         //make filter to limit results to after the first associated id.
  //         let f1 = {field: "<%- sortedAssociations[aindex].internalId _%>", valueType: <%- sortedAssociations[aindex].internalIdType _%>, value: idsToExclude[0], operator: "gt"};
  //         //add filter
  //         nonaSearchB.search.search.push(f1);
  //       }
  //     }

  //     //join search filters
  //     if(nonaSearch) nonaSearch.search.search = [...nonaSearch.search.search, ...nonaSearchB.search.search];
  //     else           nonaSearch = nonaSearchB;
  //   }
  //   //add search to variables
  //   if(nonaSearch) nonaVariables.search = nonaSearch.search;

  //   /**
  //    * Debug
  //    */
  //   if(globals.REQUEST_LOGGER) logRequest(`getNotAssociated<%- sortedAssociations[aindex].relationNameCp %>.nonAssociatedBatch.${iteration}`, nonaQuery, nonaVariables);
    
  //   //request
  //   response = await requestGraphql({ url, query:nonaQuery, variables:nonaVariables });
  //   let nonaConnection = null;
  //   //check
  //   check = checkResponse(response, graphqlErrors, "<%- sortedAssociations[aindex].targetModelPlLc _%>Connection");
  //   if(check === 'ok') {
  //     //check type
  //     if(!response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"]
  //     || typeof response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"] !== 'object'
  //     || !Array.isArray(response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].edges)
  //     || typeof response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].pageInfo !== 'object' 
  //     || response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"].pageInfo === null)
  //     return {data: response.data.data, value: null, message: 'bad_type', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

  //     //get value
  //     nonaConnection = response.data.data["<%- sortedAssociations[aindex].targetModelPlLc _%>Connection"];
  //   } else return {data: response.data.data, value: null, message: check, graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};

  //   /**
  //    * Debug
  //    */
  //   console.log("@@-- nonaConnection: ", nonaConnection);

  //   /**
  //    * 1.3 Join fetched items in 1.2 with previous ones if any: in @notAssociatedItemsEdges array.
  //    */
  //   if(nonaConnection.edges.length > 0) { //if there are new items...
  //     //adjust pageInfo for the first non associated items
  //     if(nonaEdges.length === 0) {
  //       nonaPageInfo = { ...nonaConnection.pageInfo};
  //     } else {  //adjust pageInfo for the last non associated items
  //       if(isForward) {
  //         nonaPageInfo.endCursor = nonaConnection.pageInfo.endCursor;
  //         nonaPageInfo.hasNextPage = nonaConnection.pageInfo.hasNextPage;
  //       } else {
  //         nonaPageInfo.startCursor = nonaConnection.pageInfo.startCursor;
  //         nonaPageInfo.hasPreviousPage = nonaConnection.pageInfo.hasPreviousPage;
  //       }
  //     } 
  //     //join new items      
  //     if(isForward) nonaEdges = [...nonaEdges, ...nonaConnection.edges ];
  //     else          nonaEdges = [...nonaConnection.edges, ...nonaEdges ];
  //   }

  //   /**
  //    * Debug
  //    */
  //   console.log("@@-- nonaEdges: ", nonaEdges);

  //   /**
  //    * 1.4 Check number of items fetched:
  //    *    1.4.1  If: fetched items are less than the requested number of items in 1.2 and there are more items:
  //    *           1.4.1.1 Adjust pagination to get the next batch of associated ids and next not-associated items page.
  //    *           1.4.1.2 @continue with next iteration.
  //    *    1.4.2  If: fetched items are equal to the requested number of items in 1.2 or there are no more items:
  //    *           1.4.2.1 Return Connection with edges and pageInfo properly configured. 
  //    *           1.4.2.2 @done
  //    */
  //   let thereAreMoreItems = isForward ? batchConnection.pageInfo.hasNextPage : batchConnection.pageInfo.hasPreviousPage;

  //   /**
  //    * Debug
  //    */
  //   console.log("@@-- thereAreMoreItems: ", thereAreMoreItems);
  //   console.log("@@-- nonaEdges.length : ", nonaEdges.length);

  //   if(nonaEdges.length < requiredItems && thereAreMoreItems) {
  //     //adjust pagination for next batch associated ids
  //     batchPagination.after = isForward ? batchConnection.pageInfo.endCursor : null;
  //     batchPagination.before = !isForward ? batchConnection.pageInfo.startCursor : null;
  //     batchVariables.pagination = batchPagination;
      
  //     //adjust pagination for the next non-associated items
  //     nonaPagination.first = isForward ? (requiredItems - nonaEdges.length) : null;
  //     nonaPagination.last = !isForward ? (requiredItems - nonaEdges.length) : null;
  //     nonaPagination.after = isForward ? batchConnection.pageInfo.endCursor : null;
  //     nonaPagination.before = !isForward ? batchConnection.pageInfo.startCursor : null;
  //     nonaPagination.includeCursor = false;
  //     nonaVariables = {pagination: nonaPagination}; //search will be set in next iteration

  //     //continue with next iteration...
  //     iteration++;
  //   } else {        
  //     //return value
  //     return {value: {pageInfo: nonaPageInfo, edges: nonaEdges}, message: 'ok', graphqlErrors: (graphqlErrors.length>0) ? graphqlErrors : undefined};
  //   }
  // }//end: while()
},
<%}-%>
