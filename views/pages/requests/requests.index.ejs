/**
 * requests.index.js module provides function loadApi() which
 * imports dynamically the api modules required.
 */

const modelNamesIndex = [
<%for( let i=0; i<models.length; i++ ){-%>
  "<%- models[i].nameLc _%>",
<%}-%>
<%for( let i=0; i<adminModels.length; i++ ){-%>
  "<%- adminModels[i].nameLc _%>",
<%}-%>
];

/**
 * loadApi  imports (dynamically) the api requests from modules required in @target parameter and
 * returns and object with each of the modules required.
 * 
 * @param {array | string} target target model's name string to import or string array of
 * target models names to import.
 * @returns {object}  object with api index modules imported of the required models.
 */
export async function loadApi(target) {
  //check
  if(!target || (typeof target !== 'string' && !Array.isArray(target))) throw new Error(`expected string or array in arg: ${target}`);

  let api = {};
  let _target = [];

  //set target array
  if(typeof target === 'string') _target.push(target);
  else {
    for(let i=0; i<target.length; i++) {
      if(!_target.includes(target[i])) _target.push(target[i]);
    }
  }
  //loads api module of models names in target array
  for(let i=0; i<_target.length; i++) {
    let modelName = _target[i];
    //check
    if(!modelNamesIndex.includes(modelName)) throw new Error(`target model name provided '${modelName}' does not exists`);

    let module = null;
    switch(modelName) {
<%for( let i=0; i<models.length; i++ ){-%>
      case '<%- models[i].nameLc _%>': 
        module =  await import(/* webpackChunkName: "Request-<%- models[i].nameOnPascal _%>" */ './<%- models[i].nameLc _%>');
        api['<%- models[i].nameLc _%>'] = module.default;
        break;
<%}-%>
<%for( let i=0; i<adminModels.length; i++ ){-%>
      case '<%- adminModels[i].nameLc _%>':
        module = await import(/* webpackChunkName: "Request-<%- adminModels[i].nameOnPascal _%>" */ './<%- adminModels[i].nameLc _%>');
        api['<%- adminModels[i].nameLc _%>'] = module.default;
        break;
<%}-%>

      default:
        break;
    }
  }
  return api;
}