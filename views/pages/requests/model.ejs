import { 
  requestGraphql, checkResponse, getSearchArgument, logRequest } from '../utils'
import getAttributes from './requests.attributes'
import globals from '../config/globals';

export default {

<%#
/**
 * Request:
 *  Get model table template (root query).
 * 
 * Methods:
 *   - tableTemplate
 * 
 */
-%>
<%- include('./includes/root-get-table-template'); %>

<%#
/**
 * Request:
 *  Get items count (root query).
 * 
 * Methods:
 *   - getCountItems
 * 
 */
-%>
<%- include('./includes/root-get-count'); %>

<%#
/**
 * Request:
 *  Get items (root query).
 * 
 * Methods:
 *   - getItems
 * 
 */
-%>
<%- include('./includes/root-get-items'); %>

<%#
/**
 * Request:
 *  Create new item (root mutation).
 * 
 * Methods:
 *   - createItem
 * 
 */
-%>
<%- include('./includes/root-create-item'); %>

<%#
/**
 * Request:
 *  Update an item (root mutation).
 * 
 * Methods:
 *   - updateItem
 * 
 */
-%>
<%- include('./includes/root-update-item'); %>

<%#
/**
 * Request:
 *  Delete an item (root mutation).
 * 
 * Methods:
 *   - deleteItem
 * 
 */
-%>
<%- include('./includes/root-delete-item'); %>

<%#
  /**
   * Association Filters
   * 
   */
-%>
<%for( let i=0; i<sortedAssociations.length; i++ ){-%>
<%#
/**
 * Filter:
 *  Get associated items.
 * 
 * Methods:
 *   - get<sortedAssociations[i].relationNameCp>
 * 
 */
-%>
<%- include('./includes/filter-get-associated-items', {aindex: i}); %>

<%#
/**
 * Filter:
 *  Get associated count.
 * 
 * Methods:
 *   - get<sortedAssociations[i].relationNameCp>Count
 * -------------------------
 * 
 * Implemented for:
 *   - to_many
 *   - many_to_many
 *   - generic_to_many
 * 
 * Not apply for:
 *   - to_one
 *   - generic_to_one
 * 
 */
-%>
<%_if( sortedAssociations[i].type === 'to_many' || sortedAssociations[i].type === 'to_many_through_sql_cross_table' || sortedAssociations[i].type === 'generic_to_many'){-%>
<%- include('./includes/filter-get-associated-count', {aindex: i}); %>
<%}-%>

<%#
/**
 * Filter:
 *  Get not associated count.
 * 
 * Methods:
 *   - getNotAssociated<sortedAssociations[i].relationNameCp>Count
 * 
 */
-%>
<%- include('./includes/filter-get-not-associated-count', {aindex: i}); %>

<%#
/**
 * Filter:
 *  Get not associated items.
 * 
 * Methods:
 *   - getNotAssociated<sortedAssociations[i].relationNameCp>
 * 
 */
-%>
<%- include('./includes/filter-get-not-associated-items', {aindex: i}); %>

<%}-%><%# //end: for() -%>


  /**
   * getItemsAttribute
   *
   * Get all items from GraphQL Server using a cursor-based-connection. Get only the indicated
   * attribute. No search, order or pagination are specified in this function, so
   * all items will be retrieved without a particular order or search filter.
   *
   * @param {String} url GraphQL Server url
   * @param {String} attribute Name of the attribute to be retrieved.
   */
  getItemsAttribute(url, attribute) {
    let query =
      `query
          { <%- namePlLc _%>Connection {
            edges {
              node {
                ${attribute}
              }
            }
          }}`;
    /**
     * Debug
     */
    if(globals.REQUEST_LOGGER) logRequest('getItemsAttribute', query);

    return requestGraphql({ url, query });

  },
}//end: export default

