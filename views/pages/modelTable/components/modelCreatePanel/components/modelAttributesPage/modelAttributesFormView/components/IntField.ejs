import React, { useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { makeStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';
import InputAdornment from '@material-ui/core/InputAdornment';
import CheckIcon from '@material-ui/icons/Check';

const useStyles = makeStyles(theme => ({
  textField: {
    margin: 'auto',
    width: '100%',
    maxWidth: 300,
    minWidth: 200,
  },
}));

export default function IntField(props) {
  const classes = useStyles();
  const {
    itemKey,
    name,
    label,
    text,
    valueOk,
    autoFocus,
    handleReady,
    handleSetValue,
    handleSetValueOk,
  } = props;

  const [value, setValue] = React.useState('');
  const [error, setError] = React.useState(false);
  const [intWarning, setIntWarning] = React.useState(false);
  const inputRef = useRef(null);
  const fieldRef = useRef(null);
  const intValue = useRef(null);

  useEffect(() => {
    if(text !== undefined && text !== null && text !== '') {
      setValue(text);
    }
    if(handleReady !== undefined) {
      handleReady(itemKey, fieldRef, inputRef);
    }

  }, []);

  return (
      <TextField
        id={"int-field-"+itemKey+'-'+label}
        label={label}
        ref={fieldRef}
        inputRef={inputRef}
        type="number"
        defaultValue={value}
        className={classes.textField}
        margin="normal"
        variant="standard"
        placeholder="integer"
        helperText={error ? "Invalid number" : (intWarning ? `This is an Integer field, decimals will be omitted. Value taken: ${intValue.current}` : "")}
        error={error}
        autoFocus={autoFocus!==undefined&&autoFocus===true ? true : false}
        InputProps={{
          endAdornment:
            <InputAdornment position="end">
              {(valueOk!==undefined&&valueOk===1) ? <CheckIcon color="primary" fontSize="small" /> : ''}
            </InputAdornment>
        }}
        InputLabelProps={{shrink: true}}
        onChange={(event) => {
          intValue.current = parseInt(event.target.value);
          handleSetValue(intValue.current, itemKey);

          if(event.target.value !== '') {
            setError(false);
            handleSetValueOk(0, itemKey);

            if(/^[+-]?[0-9]+$/.test(event.target.value)) {
              setIntWarning(false);
            } else {
              setIntWarning(true);
            }
          } else {
            setError(true);
            setIntWarning(false);
            handleSetValueOk(-1, itemKey);
          }
        }}
        onBlur={(event) => {
          setError(false);

          if(Number.isNaN(intValue.current)) {
            handleSetValueOk(0, itemKey);
            
          } else {
            handleSetValueOk(1, itemKey);
          }
        }}
        onKeyDown={(event) => {
          if(event.key === 'Enter') {
            if(!Number.isNaN(intValue.current)) {
              handleSetValueOk(1, itemKey);
            }
          }
        }}
      />
  );
}
IntField.propTypes = {
  itemKey: PropTypes.string.isRequired,
  name: PropTypes.string,
  label: PropTypes.string.isRequired,
  text: PropTypes.string,
  valueOk: PropTypes.number.isRequired,
  autoFocus: PropTypes.bool,
  handleReady: PropTypes.func.isRequired,
  handleSetValue: PropTypes.func.isRequired,
  handleSetValueOk: PropTypes.func.isRequired,
};