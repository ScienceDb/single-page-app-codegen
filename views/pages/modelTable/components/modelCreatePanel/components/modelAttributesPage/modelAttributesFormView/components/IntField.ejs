import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { useTranslation } from 'react-i18next';
import { makeStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import Grid from '@material-ui/core/Grid';
import InputAdornment from '@material-ui/core/InputAdornment';
import CheckIcon from '@material-ui/icons/Check';

const useStyles = makeStyles(theme => ({
  textField: {
    margin: 'auto',
    width: '100%',
    maxWidth: 300,
    minWidth: 200,
  },
}));

export default function IntField(props) {
  const classes = useStyles();
  const { t } = useTranslation();
  const {
    itemKey,
    name,
    label,
    text,
    valueOk,
    autoFocus,
    foreignKey,
    handleReady,
    handleSetValue,
  } = props;

  const [errorText, setErrorText] = useState(null);
  const [helperText, setHelperText] = useState(null);
  const inputRef = useRef(null);
  const fieldRef = useRef(null);
  const defaultValue = useRef((text !== undefined) ? text : '');
  const intValue = useRef(null);
  const textValue = useRef(null);
  const error = useRef(false);

  useEffect(() => {
    if(handleReady !== undefined) {
      handleReady(itemKey, fieldRef, inputRef);
    }

  }, []);

  useEffect(() => {
    checkText(text);
  }, [text]);

  function checkText(text) {
    if(text !== undefined && text !== null) {
      //case: string
      if(typeof text === 'string' && text.trim() !== '') {
        textValue.current = text;
        intValue.current = Math.round(parseFloat(text));
      } else if(typeof text === 'number') {//case: number
        textValue.current = text.toString();
        intValue.current = text;
      } else {
        handleSetValue(null, 0, itemKey);
        textValue.current = null;
        intValue.current = null;
        return;
      }
      //else...

      if(!(isNaN(textValue.current)) && !(isNaN(intValue.current))) {
        handleSetValue(intValue.current, 1, itemKey);

        //check max int32-bit value
        if(intValue.current > 2147483647) {
          error.current = true;
          setErrorText( t('modelPanels.intMaxErr', 'This is an Int field, the maximum valid positive number is 2147483647. Entered value: ') + `${intValue.current}` );
          setHelperText(null);
          handleSetValue(null, -1, itemKey);
        } else {
          //check min int32-bit value
          if(intValue.current < -2147483647) {
            error.current = true;
            setErrorText( t('modelPanels.intMinErr', 'This is an Int field, the minimum valid negative number is -2147483647. Entered value: ') + `${intValue.current}` );
            setHelperText(null);
            handleSetValue(null, -1, itemKey);
          } else {
            //check decimal-notation
            if(textValue.current.includes(".")) {
              setHelperText( t('modelPanels.intRoundedWarning', 'This is an Int field, the decimals will be rounded. Value taken: ')+ `${intValue.current}` );
            } else {
              //check e-notation
              if(textValue.current.includes("e")) {
                setHelperText( t('modelPanels.valueTaken', 'Value taken: ')+ `${intValue.current}` );
              } else {
                setHelperText(null);
              }
            }
          }
        }
      } else {
        handleSetValue(null, 0, itemKey);
      }
    }
  }

  return (
    <Grid container justify='flex-start' alignItems='center' spacing={2}>
      <Grid item>
        <TextField
          id={"int-field-"+itemKey+'-'+name}
          value={(foreignKey === undefined) ? undefined : (text ? text : '')}
          label={label}
          ref={fieldRef}
          inputRef={inputRef}
          type="number"
          defaultValue={(foreignKey !== undefined) ? undefined : defaultValue.current}
          className={classes.textField}
          margin="normal"
          variant="filled"
          placeholder={ t('modelPanels.integer') }
          helperText={errorText!==null ? errorText : (helperText!==null ? helperText : "")}
          error={errorText!== null}
          autoFocus={autoFocus!==undefined&&autoFocus===true ? true : false}
          InputProps={{
            endAdornment:
              <InputAdornment position="end">
                {(valueOk!==undefined&&valueOk===1) ? <CheckIcon color="primary" fontSize="small" /> : ''}
              </InputAdornment>,
              readOnly: (foreignKey !== undefined)
          }}
          InputLabelProps={{ 
            shrink: true
          }}
          inputProps={{ 
            spellCheck: 'false'
          }}
          
          onChange={(event) => {
            textValue.current = event.target.value;
            intValue.current = Math.round(parseFloat(event.target.value));

            if(textValue.current !== null && textValue.current !== '' && !(isNaN(textValue.current)) && !(isNaN(intValue.current))) {
              error.current = false;
              setErrorText(null);
              handleSetValue(intValue.current, 0, itemKey);

              //check max int32-bit value
              if(intValue.current > 2147483647) {
                error.current = true;
                setErrorText( t('modelPanels.intMaxErr', 'This is an Int field, the maximum valid positive number is 2147483647. Entered value: ') + `${intValue.current}` );
                setHelperText(null);
                handleSetValue(null, -1, itemKey);
                return;
              }

              //check min int32-bit value
              if(intValue.current < -2147483647) {
                error.current = true;
                setErrorText( t('modelPanels.intMinErr', 'This is an Int field, the minimum valid negative number is -2147483647. Entered value: ') + `${intValue.current}` );
                setHelperText(null);
                handleSetValue(null, -1, itemKey);
                return;
              }

              //check decimal-notation
              if(event.target.value.includes(".")) {
                setHelperText( t('modelPanels.intRoundedWarning', 'This is an Int field, the decimals will be rounded. Value taken: ')+ `${intValue.current}` );
              } else {
                //check e-notation
                if(event.target.value.includes("e")) {
                  setHelperText( t('modelPanels.valueTaken', 'Value taken: ')+ `${intValue.current}` );
                } else {
                  setHelperText(null);
                }
              }
              
            } else {
              error.current = false;
              setErrorText( t('modelPanels.invalidNumber', 'Invalid number') );
              setHelperText(null);
              handleSetValue(null, -1, itemKey);
            }
          }}

          onBlur={(event) => {
            if(!error.current) {
              setErrorText(null);
              if(textValue.current !== null && textValue.current !== '' && !(isNaN(textValue.current)) && !(isNaN(intValue.current))) {
                handleSetValue(intValue.current, 1, itemKey);
              } else {
                handleSetValue(null, 0, itemKey);
              }
            }
          }}

          onKeyDown={(event) => {
            if(event.key === 'Enter') {
              if(!error.current) {
                if(textValue.current !== null && textValue.current !== '' && !(isNaN(textValue.current)) && !(isNaN(intValue.current))) {
                  handleSetValue(intValue.current, 1, itemKey);
                } else {
                  handleSetValue(null, 0, itemKey);
                }
              }
            } else if(/^[+\-.e]{1}$/.test(event.key)) {
              if(textValue.current === null || textValue.current === '' || isNaN(textValue.current) || isNaN(intValue.current)) {
                error.current = false;
                setErrorText( t('modelPanels.invalidNumber', 'Invalid number') );
                setHelperText(null);
                handleSetValue(null, -1, itemKey);
              }
            }
          }}
        />
      </Grid>
      {(foreignKey !== undefined) && (
        <Grid item>
          <Typography variant="caption" color='textSecondary'>
            Foreing key
          </Typography>
      </Grid>
      )}
    </Grid>
  );
}
IntField.propTypes = {
  itemKey: PropTypes.string.isRequired,
  name: PropTypes.string,
  label: PropTypes.string.isRequired,
  text: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number,
  ]),
  valueOk: PropTypes.number.isRequired,
  autoFocus: PropTypes.bool,
  foreignKey: PropTypes.bool,
  handleReady: PropTypes.func.isRequired,
  handleSetValue: PropTypes.func.isRequired,
};