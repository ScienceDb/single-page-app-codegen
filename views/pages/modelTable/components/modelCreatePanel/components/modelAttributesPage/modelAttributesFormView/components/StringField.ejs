import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { makeStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';
import InputAdornment from '@material-ui/core/InputAdornment';
import CheckIcon from '@material-ui/icons/Check';

const useStyles = makeStyles(theme => ({
  textField: {
    margin: 'auto',
    width: '100%',
    maxWidth: 400,
    minWidth: 200,
  },
}));

export default function StringField(props) {
  const classes = useStyles();
  const {
    itemKey,
    name,
    label,
    text,
    valueOk,
    autoFocus,
    handleReady,
    handleSetValue,
  } = props;
  
  const [value, setValue] = useState('');
  const inputRef = useRef(null);
  const fieldRef = useRef(null);

  useEffect(() => {
    if(text !== undefined && text !== null && typeof text === 'string' && text.trim() !== '') {
      setValue(text);
      handleSetValue(text, 1, itemKey);
    }
    
    if(handleReady !== undefined) {
      handleReady(itemKey, fieldRef, inputRef);
    }
  }, []);

  return (
    <TextField
      id={"string-field-"+itemKey+'-'+label}
      label={label}
      ref={fieldRef}
      inputRef={inputRef}
      multiline
      rowsMax="4"
      value={value}
      className={classes.textField}
      margin="normal"
      variant="filled"
      autoFocus={autoFocus!==undefined&&autoFocus===true ? true : false}
      InputProps={{
        endAdornment:
          <InputAdornment position="end">
            {(valueOk!==undefined&&valueOk===1) ? <CheckIcon color="primary" fontSize="small" /> : ''}
          </InputAdornment>
      }}
      onChange={(event) => {
        setValue(event.target.value);
        let v = event.target.value;
        
        if(v === null || v === undefined || typeof v !== 'string' || v.trim() === '') {
          handleSetValue(null, 0, itemKey);
        } else {
          handleSetValue(v, 0, itemKey);
        }
      }}
      onBlur={(event) => {
        if(value === null || value === undefined || typeof value !== 'string' || value.trim() === '') {
          handleSetValue(null, 0, itemKey);
        } else {
          handleSetValue(value, 1, itemKey);
        }
      }}
      onKeyDown={(event) => {
        if(event.key === 'Enter') {
          if(value === null || value === undefined || typeof value !== 'string' || value.trim() === '') {
            handleSetValue(null, 0, itemKey);
          } else {
            handleSetValue(value, 1, itemKey);
          }
        }
      }}
    />
  );
}
StringField.propTypes = {
  itemKey: PropTypes.string.isRequired,
  name: PropTypes.string,
  label: PropTypes.string.isRequired,
  text: PropTypes.string,
  valueOk: PropTypes.number.isRequired,
  autoFocus: PropTypes.bool,
  handleReady: PropTypes.func.isRequired,
  handleSetValue: PropTypes.func.isRequired,
};