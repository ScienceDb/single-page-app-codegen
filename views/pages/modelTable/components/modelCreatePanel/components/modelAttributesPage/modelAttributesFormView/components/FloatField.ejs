import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { makeStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';
import InputAdornment from '@material-ui/core/InputAdornment';
import CheckIcon from '@material-ui/icons/Check';

const useStyles = makeStyles(theme => ({
  textField: {
    margin: 'auto',
    width: '100%',
    maxWidth: 300,
    minWidth: 200,
  },
}));

export default function FloatField(props) {
  const classes = useStyles();
  const {
    itemKey,
    name,
    label,
    text,
    valueOk,
    autoFocus,
    handleReady,
    handleSetValue,
    handleSetValueOk,
  } = props;

  const [error, setError] = useState(false);
  const inputRef = useRef(null);
  const fieldRef = useRef(null);
  const defaultValue = useRef((text !== undefined) ? text : '');
  const floatValue = useRef(null);
  const textValue = useRef(null);

  useEffect(() => {
    if(text !== undefined && text !== null && typeof text === 'string' && text.trim() !== '') {
      textValue.current = text;
      floatValue.current = parseFloat(text);

      if(!isNaN(text)) {
        handleSetValue(floatValue.current, itemKey);
        handleSetValueOk(1, itemKey);
      } else {
        handleSetValue(null, itemKey);
        handleSetValueOk(0, itemKey);
      }
    }

    if(handleReady !== undefined) {
      handleReady(itemKey, fieldRef, inputRef);
    }

  }, []);

  return (
      <TextField
        id={"float-field-"+itemKey+'-'+label}
        label={label}
        ref={fieldRef}
        inputRef={inputRef}
        type="number"
        defaultValue={defaultValue.current}
        className={classes.textField}
        margin="normal"
        variant="standard"
        placeholder="number"
        helperText={error ? "Invalid number" : ""}
        error={error}
        autoFocus={autoFocus!==undefined&&autoFocus===true ? true : false}
        InputProps={{
          endAdornment:
            <InputAdornment position="end">
              {(valueOk!==undefined&&valueOk===1) ? <CheckIcon color="primary" fontSize="small" /> : ''}
            </InputAdornment>
        }}
        InputLabelProps={{shrink: true}}

        onChange={(event) => {
          textValue.current = event.target.value;
          floatValue.current = parseFloat(event.target.value);

          if(textValue.current !== null && textValue.current !== '' && !isNaN(textValue.current)) {
            setError(false);
            handleSetValue(floatValue.current, itemKey);
            handleSetValueOk(0, itemKey);
          } else {
            setError(true);
            handleSetValue(null, itemKey);
            handleSetValueOk(-1, itemKey);
          }
        }}

        onBlur={(event) => {
          setError(false);
          if(textValue.current !== null && textValue.current !== '' && !isNaN(textValue.current)) {
            handleSetValueOk(1, itemKey);
          } else {
            handleSetValueOk(0, itemKey);
          }
        }}

        onKeyDown={(event) => {
          if(event.key === 'Enter') {
            if(textValue.current !== null && textValue.current !== '' && !isNaN(textValue.current)) {
              handleSetValueOk(1, itemKey);
            } else {
              handleSetValueOk(0, itemKey);
            }
          }
        }}
      />
  );
}
FloatField.propTypes = {
  itemKey: PropTypes.string.isRequired,
  name: PropTypes.string,
  label: PropTypes.string.isRequired,
  text: PropTypes.string,
  valueOk: PropTypes.number.isRequired,
  autoFocus: PropTypes.bool,
  handleReady: PropTypes.func.isRequired,
  handleSetValue: PropTypes.func.isRequired,
  handleSetValueOk: PropTypes.func.isRequired,
};