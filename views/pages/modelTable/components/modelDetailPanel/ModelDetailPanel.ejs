import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { makeStyles } from '@material-ui/core/styles';
import <%- nameCp _%>AttributesPage from './components/<%- nameLc _%>AttributesPage/<%- nameCp _%>AttributesPage'
import <%- nameCp _%>AssociationsPage from './components/<%- nameLc _%>AssociationsPage/<%- nameCp _%>AssociationsPage'
<%for( i=0; i<sortedAssociations.length; i++ ){-%>
import <%- sortedAssociations[i].targetModelCp _%> DetailPanel from '../../../<%- sortedAssociations[i].targetModelLc _%>Table/components/<%- sortedAssociations[i].targetModelLc _%>DetailPanel/<%- sortedAssociations[i].targetModelCp _%>DetailPanel'
<%}-%>
import Typography from '@material-ui/core/Typography';
import Grid from '@material-ui/core/Grid';
import Dialog from '@material-ui/core/Dialog';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from '@material-ui/icons/Close';
import Slide from '@material-ui/core/Slide';
import Tooltip from '@material-ui/core/Tooltip';

const useStyles = makeStyles(theme => ({
  root: {
    marginTop: theme.spacing(3),
    minWidth: 450,
  },
  appBar: {
    position: 'relative',
  },
  title: {
    marginLeft: theme.spacing(2),
    flex: 1,
  },
}));

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});

export default function <%- nameCp _%>DetailPanel(props) {
  const classes = useStyles();
  const { 
    item,
    dialog,
    handleClose
  } = props;
  
  const [open, setOpen] = useState(true);
  const [valueOkStates, setValueOkStates] = useState(getInitialValueOkStates());

<%for( i=0; i<sortedAssociations.length; i++ ){-%>
  const [<%- sortedAssociations[i].targetModelLc _%>DetailDialogOpen, set<%- sortedAssociations[i].targetModelCp _%>DetailDialogOpen] = useState(false);
  const [<%- sortedAssociations[i].targetModelLc _%>DetailItem, set<%- sortedAssociations[i].targetModelCp _%>DetailItem] = useState(undefined);
<%}-%>

<%for( i=0; i<sortedAssociations.length; i++ ){-%>
  useEffect(() => {
    if (<%- sortedAssociations[i].targetModelLc _%>DetailItem !== undefined) {
      set<%- sortedAssociations[i].targetModelCp _%>DetailDialogOpen(true);
    }
  }, [<%- sortedAssociations[i].targetModelLc _%>DetailItem]);
<%}-%>

  function getInitialValueOkStates() {
    /*
      status codes:
        1: acceptable
        0: unknown/not tested yet (this is set on initial render)/empty
       -1: not acceptable 
    */
    let initialValueOkStates = {};

<%for( i=0; i<attributesArr.length; i++ ){-%>
    initialValueOkStates.<%- attributesArr[i][0] %> = (item.<%- attributesArr[i][0] _%>!==null ? 1 : 0);
<%}-%>

    return initialValueOkStates;
  }

  const handleCancel = (event) => {
    setOpen(false);
    handleClose(event);
  }

<%for( i=0; i<sortedAssociations.length; i++ ){-%>
  const handleClickOn<%- sortedAssociations[i].targetModelCp _%>Row = (event, item) => {
    set<%- sortedAssociations[i].targetModelCp _%>DetailItem(item);
  };

  const handle<%- sortedAssociations[i].targetModelCp _%>DetailDialogClose = (event) => {
    delayedClose<%- sortedAssociations[i].targetModelCp _%>DetailPanel(event, 500);
  }

  const delayedClose<%- sortedAssociations[i].targetModelCp _%>DetailPanel = async (event, ms) => {
    await new Promise(resolve => {
      window.setTimeout(function() {
        set<%- sortedAssociations[i].targetModelCp _%>DetailDialogOpen(false);
        set<%- sortedAssociations[i].targetModelCp _%>DetailItem(undefined);
        resolve("ok");
      }, ms);
    });
  };

<%}-%>

  return (
    <div>
      {/* Dialog Mode */}
      {(dialog !== undefined && dialog === true) && (
        
        <Dialog fullScreen open={open} onClose={handleCancel} TransitionComponent={Transition}>
          <AppBar className={classes.appBar}>
            <Toolbar>
              <Tooltip title={"Close"}>
                <IconButton
                  edge="start"
                  color="inherit"
                  onClick={handleCancel}
                >
                  <CloseIcon />
                </IconButton>
              </Tooltip>
              <Typography variant="h6" className={classes.title}>
                <%- nameCp %> Info
              </Typography>
            </Toolbar>
          </AppBar>
    
          <div className={classes.root}>
            <Grid container justify='center'>
              <Grid item xs={12}>
                  
                {/* Attributes Page */}
                <<%- nameCp _%>AttributesPage
                  item={item}
                  valueOkStates={valueOkStates}
                />
    
                {/* Associations Page */}
                <<%- nameCp _%>AssociationsPage
                  item={item}
<%for( i=0; i<sortedAssociations.length; i++ ){-%>
                  handleClickOn<%- sortedAssociations[i].targetModelCp _%>Row={handleClickOn<%- sortedAssociations[i].targetModelCp _%>Row}
<%}-%>
                />
    
              </Grid>
            </Grid>
          </div>
        </Dialog>
      )}

      {/* No-Dialog Mode */}
      {(dialog !== undefined && dialog === false) && (
    
          <div className={classes.root}>
            <Grid container justify='center'>
              <Grid item xs={12}>
                  
                {/* Attributes Page */}
                <<%- nameCp _%>AttributesPage
                  item={item}
                  valueOkStates={valueOkStates}
                />
    
                {/* Associations Page */}
                <<%- nameCp _%>AssociationsPage
                  item={item}
<%for( i=0; i<sortedAssociations.length; i++ ){-%>
                  handleClickOn<%- sortedAssociations[i].targetModelCp _%>Row={handleClickOn<%- sortedAssociations[i].targetModelCp _%>Row}
<%}-%>
                />
    
              </Grid>
            </Grid>
          </div>
      )}

<%for( i=0; i<sortedAssociations.length; i++ ){-%>
    {/* Dialog: <%- sortedAssociations[i].targetModelCp %> Detail Panel */}
    {(<%- sortedAssociations[i].targetModelLc _%>DetailDialogOpen) && (
      <<%- sortedAssociations[i].targetModelCp _%>DetailPanel
        item={<%- sortedAssociations[i].targetModelLc _%>DetailItem}
        dialog={true}
        handleClose={handle<%- sortedAssociations[i].targetModelCp _%>DetailDialogClose}
      />
    )}
<%}-%>
    </div>
  );
}
<%- nameCp _%>DetailPanel.propTypes = {
  item: PropTypes.object.isRequired,
  dialog: PropTypes.bool,
  handleClose: PropTypes.func.isRequired
};