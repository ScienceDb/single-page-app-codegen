import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { makeStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';
import InputAdornment from '@material-ui/core/InputAdornment';
import CheckIcon from '@material-ui/icons/Check';

const useStyles = makeStyles(theme => ({
  textField: {
    margin: 'auto',
    width: '100%',
    maxWidth: 300,
    minWidth: 200,
  },
}));

export default function IntField(props) {
  const classes = useStyles();
  const {
    itemKey,
    name,
    label,
    text,
    valueOk,
    autoFocus,
    handleReady,
  } = props;

  const [errorText, setErrorText] = useState(null);
  const [helperText, setHelperText] = useState(null);
  const inputRef = useRef(null);
  const fieldRef = useRef(null);
  const defaultValue = useRef((text !== undefined) ? text : '');
  const intValue = useRef(null);
  const textValue = useRef(null);
  const error = useRef(false);

  useEffect(() => {
    if(text !== undefined && text !== null && typeof text === 'string' && text.trim() !== '') {
      //case: string
      if(typeof text === 'string' && text.trim() !== '') {
        textValue.current = text;
        intValue.current = Math.round(parseFloat(text));
      } else if(typeof text === 'number') {//case: number
        textValue.current = text.toString();
        intValue.current = text;
      } else {

        if(handleReady !== undefined) {
          handleReady(itemKey, fieldRef, inputRef);
        }
        return;
      }
      //else...

      if(!(isNaN(textValue.current)) && !(isNaN(intValue.current))) {
        
        //check max int32-bit value
        if(intValue.current > 2147483647) {
          error.current = true;
          setErrorText(`This is an Integer field, the maximum valid positive number is 2147483647. Entered value: ${intValue.current}`);
          setHelperText(null);
        } else {
          //check min int32-bit value
          if(intValue.current < -2147483647) {
            error.current = true;
            setErrorText(`This is an Integer field, the minimum valid negative number is -2147483647. Entered value: ${intValue.current}`);
            setHelperText(null);
          } else {
            //check decimal-notation
            if(text.includes(".")) {
              setHelperText(`This is an Integer field, the decimals will be rounded. Value taken: ${intValue.current}`);
            } else {
              //check e-notation
              if(text.includes("e")) {
                setHelperText(`Value taken: ${intValue.current}`);
              } else {
                setHelperText(null);
              }
            }
          }
        }
      }
    }

    if(handleReady !== undefined) {
      handleReady(itemKey, fieldRef, inputRef);
    }

  }, []);

  return (
      <TextField
        id={"int-field-"+itemKey+'-'+label}
        label={label}
        ref={fieldRef}
        inputRef={inputRef}
        type="number"
        defaultValue={defaultValue.current}
        className={classes.textField}
        margin="normal"
        variant="outlined"
        placeholder=""
        helperText={errorText!==null ? errorText : (helperText!==null ? helperText : "")}
        error={errorText!== null}
        autoFocus={autoFocus!==undefined&&autoFocus===true ? true : false}
        InputProps={{
          endAdornment:
            <InputAdornment position="end">
              {(valueOk!==undefined&&valueOk===1) ? <CheckIcon color="primary" fontSize="small" /> : ''}
            </InputAdornment>,
          readOnly: true
        }}
        InputLabelProps={{ 
          shrink: true
        }}
        inputProps={{ 
          spellCheck: 'false'
        }}
      />
  );
}
IntField.propTypes = {
  itemKey: PropTypes.string.isRequired,
  name: PropTypes.string,
  label: PropTypes.string.isRequired,
  text: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number,
  ]),
  valueOk: PropTypes.number.isRequired,
  autoFocus: PropTypes.bool,
  handleReady: PropTypes.func,
};