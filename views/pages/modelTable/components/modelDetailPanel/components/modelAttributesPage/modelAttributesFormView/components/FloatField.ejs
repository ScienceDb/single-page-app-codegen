import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { useTranslation } from 'react-i18next';
import { makeStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';
import InputAdornment from '@material-ui/core/InputAdornment';
import CheckIcon from '@material-ui/icons/Check';

const useStyles = makeStyles(theme => ({
  textField: {
    margin: 'auto',
    width: '100%',
    maxWidth: 300,
    minWidth: 200,
  },
}));

export default function FloatField(props) {
  const classes = useStyles();
  const { t, i18n } = useTranslation();
  const {
    itemKey,
    name,
    label,
    text,
    valueOk,
    autoFocus,
    handleReady,
  } = props;

  const [errorText, setErrorText] = useState(null);
  const [helperText, setHelperText] = useState(null);
  const inputRef = useRef(null);
  const fieldRef = useRef(null);
  const defaultValue = useRef((text !== undefined) ? text : '');
  const floatValue = useRef(null);
  const textValue = useRef(null);
  const error = useRef(false);

  useEffect(() => {
    if(text !== undefined && text !== null && typeof text === 'string' && text.trim() !== '') {
      //case: string
      if(typeof text === 'string' && text.trim() !== '') {
        textValue.current = text;
        floatValue.current = parseFloat(text);
      } else if(typeof text === 'number') {//case: number
        textValue.current = text.toString();
        floatValue.current = text;
      } else {

        if(handleReady !== undefined) {
          handleReady(itemKey, fieldRef, inputRef);
        }
        return;
      }
      //else...

      if(!(isNaN(textValue.current)) && !(isNaN(floatValue.current))) {

        //check max float number
        if(floatValue.current > 1.79769313486231e+308) {
          error.current = true;
          setErrorText( t('modelPanels.floatMaxErr', 'This is a Float field, the maximum valid positive number is 1.79769313486231e+308. Entered value: ') + `${floatValue.current}` );
          setHelperText(null);
        } else {
          //check min float number
          if(floatValue.current < -1.79769313486231e+308) {
            error.current = true;
            setErrorText( t('modelPanels.floatMinErr', 'This is a Float field, the minimum valid negative number is -1.79769313486231e+308. Entered value: ') + `${floatValue.current}` );
            setHelperText(null);
          } else {
            //check e-notation
            if(text.includes("e")) {
              setHelperText( t('modelPanels.valueTaken', 'Value taken: ')+ `${floatValue.current}` );
            } else {
              setHelperText(null);
            }
          }
        }
      }
    }

    if(handleReady !== undefined) {
      handleReady(itemKey, fieldRef, inputRef);
    }

  }, []);

  return (
      <TextField
        id={"float-field-"+itemKey+'-'+label}
        label={label}
        ref={fieldRef}
        inputRef={inputRef}
        type="number"
        defaultValue={defaultValue.current}
        className={classes.textField}
        margin="normal"
        variant="outlined"
        placeholder=""
        helperText={errorText!==null ? errorText : (helperText!==null ? helperText : "")}
        error={errorText!== null}
        autoFocus={autoFocus!==undefined&&autoFocus===true ? true : false}
        InputProps={{
          endAdornment:
            <InputAdornment position="end">
              {(valueOk!==undefined&&valueOk===1) ? <CheckIcon color="primary" fontSize="small" /> : ''}
            </InputAdornment>,
          readOnly: true
        }}
        InputLabelProps={{ 
          shrink: true
        }}
        inputProps={{ 
          spellCheck: 'false'
        }}
      />
  );
}
FloatField.propTypes = {
  itemKey: PropTypes.string.isRequired,
  name: PropTypes.string,
  label: PropTypes.string.isRequired,
  text: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number,
  ]),
  valueOk: PropTypes.number.isRequired,
  autoFocus: PropTypes.bool,
  handleReady: PropTypes.func,
};