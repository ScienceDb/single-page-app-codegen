import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import moment from "moment";
import MomentUtils from "@date-io/moment";
import { MuiPickersUtilsProvider, KeyboardTimePicker } from '@material-ui/pickers';
import { makeStyles } from '@material-ui/core/styles';
import InputAdornment from '@material-ui/core/InputAdornment';
import CheckIcon from '@material-ui/icons/Check';

const useStyles = makeStyles(theme => ({
  input: {
    margin: theme.spacing(0),
  },
}));

export default function TimeField(props) {
  const classes = useStyles();
  const {
    itemKey,
    name,
    label,
    text,
    valueOk,
    autoFocus,
    handleReady,
    handleSetValue,
  } = props;
  
  const [selectedDate, setSelectedDate] = useState(null);
  const inputRef = useRef(null);
  const mdate = useRef(moment.invalid());

  useEffect(() => {
    if(text !== undefined && text !== null && typeof text === 'string' && text.trim() !== '') {
      
      let m = moment(text, "HH:mm:ss.SSSZ");

      if(m.isValid()) {
        mdate.current = m;
        setSelectedDate(m);
        handleSetValue(mdate.current.format("HH:mm:ss.SSSZ"), 1, itemKey);
      } else {
        mdate.current = moment.invalid();
        setSelectedDate(null);
        handleSetValue(null, 0, itemKey);
      }
    }

    if(handleReady !== undefined) {
      handleReady(itemKey, inputRef, inputRef);
    }
  }, []);

  return (
    <MuiPickersUtilsProvider libInstance={moment} utils={MomentUtils}>
        <KeyboardTimePicker
          className={classes.input}
          id={"time-field-"+itemKey+'-'+label}
          label={label}
          inputRef={inputRef}
          format="HH:mm:ss.SSS"
          ampm={true}
          value={selectedDate}
          views={['hours', 'minutes', 'seconds']}
          margin="normal"
          inputVariant="filled"
          autoFocus={autoFocus!==undefined&&autoFocus===true ? true : false}
          InputProps={{
            startAdornment:
              <InputAdornment position="start">
                {(valueOk!==undefined&&valueOk===1) ? <CheckIcon color="primary" fontSize="small" /> : ''}
              </InputAdornment>
          }}
          onChange={(date, value) => {
            setSelectedDate(date);

            if(date !== null) {
              mdate.current = date;

              if(mdate.current.isValid()) {
                handleSetValue(mdate.current.format("HH:mm:ss.SSSZ"), 1, itemKey);
              } else {
                handleSetValue(null, -1, itemKey);
              }
            } else {
              mdate.current = moment.invalid();
              handleSetValue(null, 0, itemKey);
            }
          }}

          onBlur={(event) => {
            if(mdate.current.isValid()) {
              handleSetValue(mdate.current.format("HH:mm:ss.SSSZ"), 1, itemKey);
            }
          }}

          onKeyDown={(event) => {
            if(event.key === 'Enter') {
              if(mdate.current.isValid()) {
                handleSetValue(mdate.current.format("HH:mm:ss.SSSZ"), 1, itemKey);
              }
            }
          }}
        />
    </MuiPickersUtilsProvider>
  );
}
TimeField.propTypes = {
  itemKey: PropTypes.string.isRequired,
  name: PropTypes.string,
  label: PropTypes.string.isRequired,
  text: PropTypes.string,
  valueOk: PropTypes.number.isRequired,
  autoFocus: PropTypes.bool,
  handleReady: PropTypes.func.isRequired,
  handleSetValue: PropTypes.func.isRequired,
};