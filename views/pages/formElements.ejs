<template>
  <div id="<%- nameLc -%>-form-elemns-div">

  <input type="hidden" v-model="<%- nameLc -%>.id"/>

  <% for ( i=0; i<attributesArr.length; i++ ) { -%>

    <div id="<%- nameLc -%>-<%- attributesArr[i][0] -%>-div" class="form-group">
      <% let iterAttr = attributesArr[i] -%>
      <label><%- iterAttr[0] -%></label>
      <% include ../partials/input %>
      <div id="<%- nameLc -%>-<%- iterAttr[0] -%>-err" v-if="validationError('<%- iterAttr[0] -%>')" class="alert alert-danger">
        <ul>
          <li v-for="err in validationError('<%- iterAttr[0] -%>')">{{err.message}}</li>
        </ul>
      </div>
    </div>

  <% } -%>

  <% for ( i=0; i<belongsTosArr.length; i++ ) { -%>
    <% var bt = belongsTosArr[i] -%>

    <div id="<%- nameLc -%>-<%- bt.targetModelLc -%>-div" class="form-group">
      <label><%- bt.relationName -%></label>
      <foreign-key-form-element
        :searchUrl = "this.$baseUrl()"
        v-model:foreignKey="<%- nameLc -%>.<%- bt.foreignKey -%>"
        label="<%- bt.label -%>"
        <%let sublabel = ""-%>
        <%if(bt.sublabel){-%>
    subLabel = "<%-bt.sublabel-%>"
        <%sublabel = bt.sublabel-%>
        <%}-%>
        valueKey="<%- bt.primaryKey -%>"
        targetModel="<%-bt.targetModelCp%>"
        v-bind:initialInput="<%- bt.relationName -%>InitialLabel"
        v-bind:query= "<%-bt.relationName-%>Query"
        queryName = "<%-bt.targetModelPlLc-%>"
        >
      </foreign-key-form-element>
    </div>

  <% } -%>


  <% for ( i=0; i<hasManysArr.length; i++ ) { -%>
    <% var manyRel = hasManysArr[i] -%>

    <div id="<%- nameLc -%>-<%- manyRel.relationName -%>-div" class="form-group">
      <label><%- manyRel.relationName -%></label>
      <has-many-form-element
        :searchUrl="this.$baseUrl()"
        :idSelected="<%- nameLc -%>.id"
        :countQuery="<%- nameLc -%>.countFiltered<%- manyRel.relationNameCp -%>"
        :mode="mode"
        :addItems.sync="<%- nameLc -%>.add<%- manyRel.relationNameCp -%>"
        label="<%- manyRel.label -%>"
        <%let sublabel = ""-%>
        <%if(manyRel.sublabel){-%>
    subLabel ="<%-manyRel.sublabel-%>"
        <%sublabel = manyRel.sublabel-%><%}-%>
        valueKey="id"
        model="<%-nameCp-%>"
        targetModel = "<%-manyRel.targetModelCp-%>"
        removeName="remove<%-manyRel.relationNameCp-%>"
        addName="add<%-manyRel.relationNameCp-%>"
        v-bind:queryOne= "<%-manyRel.relationName-%>Subquery"
        queryOneName="readOne<%- nameCp -%>"
        subQueryName="<%- manyRel.relationName -%>Filter"
        v-bind:query = "<%-manyRel.relationName-%>Query"
        queryName = "<%-manyRel.targetModelPlLc-%>"
        >
      </has-many-form-element>
    </div>

  <% } -%>


  </div>
</template>

<script>
<% if (typeof belongsTosArr !== undefined && belongsTosArr.length > 0 ||
  typeof hasManysArr !== undefined && hasManysArr.length > 0) { -%>
import Vue from 'vue'
<% } -%>

<% if (typeof belongsTosArr !== 'undefined' && belongsTosArr.length > 0) { -%>
import foreignKeyFormElement from './foreignKeyFormElement.vue'

Vue.component('foreign-key-form-element', foreignKeyFormElement)
<% } -%>

<% if (typeof hasManysArr !== 'undefined' && hasManysArr.length > 0) { -%>
import hasManyFormElemn from './hasManyFormElemn.vue'

Vue.component('has-many-form-element', hasManyFormElemn)
<% } -%>
import inflection from 'inflection'
import axios from 'axios'
import Queries from '../requests/index'

export default {
  props: [ '<%- nameLc -%>', 'errors', 'mode' ],
  data(){
    return{
    }
  },
  computed: {

    <% for ( i=0; i<belongsTosArr.length; i++ ) { -%>
      <%let btr = belongsTosArr[i] -%>

      <%-btr.relationName-%>Query: function(){
        return Queries.<%-btr.targetModelCp-%>.getAll("<%-btr.label-%>", <%if(btr.sublabel){%>"<%-btr.sublabel-%>"<%}else{-%>""<%}%>);
      },

    <%}-%>


    <% for ( i=0; i<hasManysArr.length; i++ ) { -%>
      <% var rel = hasManysArr[i] -%>

      <%-rel.relationName-%>Query : function(){
        return Queries.<%- rel.targetModelCp -%>.getAll("<%-rel.label-%>",<%if(rel.sublabel){%>"<%-rel.sublabel-%>"<%}else{-%>""<%}%>);
      },

      <%-rel.relationName-%>Subquery : function(){
        return Queries.<%-nameCp-%>.getOne("<%-rel.relationName-%>Filter","<%-rel.label-%>",<%if(rel.sublabel){%>"<%-rel.sublabel-%>"<%}else{-%>""<%}%>);
      }
      <% if (i < (hasManysArr.length - 1) || belongsTosArr.length>0) { -%>
      ,
      <% } -%>
    <%}-%>

    <% for ( i=0; i<belongsTosArr.length; i++ ) { -%>
    <% var bt = belongsTosArr[i] -%>
    <%- bt.relationName -%>InitialLabel: function () {
      var x = this.<%- nameLc -%>.<%- bt.relationName %>
      if (x !== null && typeof x === 'object' &&
          x['<%- bt.label -%>'] !== null &&
          typeof x['<%- bt.label -%>'] !== 'undefined') {
        return x['<%- bt.label -%>']
      } else {
        return ''
      }
    }
    <% if (i < (belongsTosArr.length - 1)) { -%>
    ,
    <% } -%>
  <% } -%>

  },
  methods: {
    validationError(modelField) {
      if (this.errors == null) return false;
      return this.errors.details.filter(function (el) {
        return el.path === modelField
      })
    }
  },
	mounted: function() {
    let el = this;
    $(document).ready(function(){
      $('.datepicker').datepicker({
        format: el.$defaultDateFormat(),
        dateFormat: el.$defaultDateFormat()
      })
    })
	},
  created(){

  }
}
</script>
