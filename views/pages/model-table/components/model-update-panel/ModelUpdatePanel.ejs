import React, { useState, useRef, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { useSnackbar } from 'notistack';
import PropTypes from 'prop-types';
<%if(typeAttributes.hasOwnProperty('Date') || typeAttributes.hasOwnProperty('Time') || typeAttributes.hasOwnProperty('DateTime')) {-%>
  import moment from "moment";
<%}-%>
import { useTranslation } from 'react-i18next';
import <%- nameCp _%>AttributesPage from './components/<%- nameLc _%>-attributes-page/<%- nameCp _%>AttributesPage'
import <%- nameCp _%>AssociationsPage from './components/<%- nameLc _%>-associations-page/<%- nameCp _%>AssociationsPage'
import <%- nameCp _%>TabsA from './components/<%- nameCp _%>TabsA'
import <%- nameCp _%>ConfirmationDialog from './components/<%- nameCp _%>ConfirmationDialog'
<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
import <%- sortedAssociatedModels[i].targetModelCp _%> DetailPanel from '../../../<%- sortedAssociatedModels[i].targetModelLc _%>-table/components/<%- sortedAssociatedModels[i].targetModelLc _%>-detail-panel/<%- sortedAssociatedModels[i].targetModelCp _%>DetailPanel'
<%}-%>
import api from '../../../../../../../requests/requests.index.js'
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import Grid from '@material-ui/core/Grid';
import Dialog from '@material-ui/core/Dialog';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Button from '@material-ui/core/Button';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from '@material-ui/icons/Close';
import Slide from '@material-ui/core/Slide';
import Fab from '@material-ui/core/Fab';
import Tooltip from '@material-ui/core/Tooltip';
import SaveIcon from '@material-ui/icons/Save';

const useStyles = makeStyles(theme => ({
  root: {
    minWidth: 450,
  },
  title: {
    marginLeft: theme.spacing(2),
    flex: 1,
  },
  tabsA: {
    backgroundColor: "#ffffff",
  },
  fabButton: {
    position: 'absolute',
    zIndex: 1,
    bottom: -26+3,
    right: 10,
    margin: '0 auto',
  },
  notiErrorActionText: {
    color: '#eba0a0',
  },
}));

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});

export default function <%- nameCp _%>UpdatePanel(props) {
  const classes = useStyles();
  const { t } = useTranslation();
  const { enqueueSnackbar, closeSnackbar } = useSnackbar();

  const {
    permissions, 
    item,
    handleClose,
  } = props;
  
  const [open, setOpen] = useState(true);
  const [tabsValue, setTabsValue] = useState(0);
  const [valueOkStates, setValueOkStates] = useState(getInitialValueOkStates());
  <%if(hasOwnForeingKeys){-%>
  const [foreignKeys, setForeignKeys] = useState(getInitialForeignKeys());
  <%}-%>

  const [confirmationOpen, setConfirmationOpen] = useState(false);
  const [confirmationTitle, setConfirmationTitle] = useState('');
  const [confirmationText, setConfirmationText] = useState('');
  const [confirmationAcceptText, setConfirmationAcceptText] = useState('');
  const [confirmationRejectText, setConfirmationRejectText] = useState('');

  const handleAccept = useRef(undefined);
  const handleReject = useRef(undefined);
<%for( let i=0; i<sortedAssociations.length; i++ ){-%>
<%if(sortedAssociations[i].type === 'to_one'){-%>
  const <%- sortedAssociations[i].relationNameLc _%>IdsToAdd = useRef((item.<%- sortedAssociations[i].relationName _%> && item.<%- sortedAssociations[i].relationName _%>.id) ? [item.<%- sortedAssociations[i].relationName _%>.id] : []);
  const [<%- sortedAssociations[i].relationNameLc _%>IdsToAddState, set<%- sortedAssociations[i].relationNameCp _%>IdsToAddState] = useState((item.<%- sortedAssociations[i].relationName _%> && item.<%- sortedAssociations[i].relationName _%>.id) ? [item.<%- sortedAssociations[i].relationName _%>.id] : []);
<%} else {-%>
  const <%- sortedAssociations[i].relationNameLc _%>IdsToAdd = useRef([]);
  const <%- sortedAssociations[i].relationNameLc _%>IdsToRemove = useRef([]);
  const [<%- sortedAssociations[i].relationNameLc _%>IdsToAddState, set<%- sortedAssociations[i].relationNameCp _%>IdsToAddState] = useState([]);
  const [<%- sortedAssociations[i].relationNameLc _%>IdsToRemoveState, set<%- sortedAssociations[i].relationNameCp _%>IdsToRemoveState] = useState([]);
<%}}-%>
  const values = useRef(getInitialValues());
  const valuesOkRefs = useRef(getInitialValueOkStates());

<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
  const [<%- sortedAssociatedModels[i].targetModelLc _%>DetailDialogOpen, set<%- sortedAssociatedModels[i].targetModelCp _%>DetailDialogOpen] = useState(false);
  const [<%- sortedAssociatedModels[i].targetModelLc _%>DetailItem, set<%- sortedAssociatedModels[i].targetModelCp _%>DetailItem] = useState(undefined);
<%}-%>

  const graphqlServerUrl = useSelector(state => state.urls.graphqlServerUrl)

  const actionText = useRef(null);
  const action = (key) => (
    <>
      <Button color='inherit' variant='text' size='small' className={classes.notiErrorActionText} onClick={() => { closeSnackbar(key) }}>
        {actionText.current}
      </Button>
    </> 
  );

  useEffect(() => {}, []);

<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
  useEffect(() => {
    if (<%- sortedAssociatedModels[i].targetModelLc _%>DetailItem !== undefined) {
      set<%- sortedAssociatedModels[i].targetModelCp _%>DetailDialogOpen(true);
    }
  }, [<%- sortedAssociatedModels[i].targetModelLc _%>DetailItem]);
<%}-%>

  function getInitialValues() {
    let initialValues = {};

<%for( let i=0; i<attributesArr.length; i++ ){-%>
    initialValues.<%- attributesArr[i][0] %> = item.<%- attributesArr[i][0] _%>;
<%}-%>

    return initialValues;
  }

<%if(hasOwnForeingKeys){-%>
  function getInitialForeignKeys() {
    let initialForeignKeys = {};
    
<%for( let i=0; i<ownForeignKeysArr.length; i++ ){-%>
    initialForeignKeys.<%- ownForeignKeysArr[i] %> = item.<%- ownForeignKeysArr[i] _%>;
<%}-%>

    return initialForeignKeys;
  }
<%}-%>

  function getInitialValueOkStates() {
    /*
      status codes:
        1: acceptable
        0: unknown/not tested yet (this is set on initial render)/empty
       -1: not acceptable 
    */
    let initialValueOkStates = {};

<%for( let i=0; i<attributesArr.length; i++ ){-%>
    initialValueOkStates.<%- attributesArr[i][0] %> = (item.<%- attributesArr[i][0] _%>!==null ? 1 : 0);
<%}-%>

    return initialValueOkStates;
  }

  function areThereNotAcceptableFields() {
    let a = Object.entries(valueOkStates);
    for(let i=0; i<a.length; ++i) {
      if(a[i][1] === -1) {
        return true;
      }
    }
    return false;
  }

  function areThereIncompleteFields() {
    let a = Object.entries(valueOkStates);
    for(let i=0; i<a.length; ++i) {
      if(a[i][1] === 0) {
        return true;
      }
    }
    return false;
  }

  function areThereChangedFields() {
<%for( let i=0; i<attributesArr.length; i++ ){-%>
<% if(attributesArr[i][1] === 'DateTime') {-%>
    if((values.current.<%- attributesArr[i][0] %> === null || item.<%- attributesArr[i][0] %> === null) && item.<%- attributesArr[i][0] %> !== values.current.<%- attributesArr[i][0] %>) { return true; }
    if(values.current.<%- attributesArr[i][0] %> !== null && item.<%- attributesArr[i][0] %> !== null && !moment(values.current.<%- attributesArr[i][0] %>).isSame(item.<%- attributesArr[i][0] %>)) { return true; }
<%} else if(attributesArr[i][1] === 'Time'){-%>
    if((values.current.<%- attributesArr[i][0] %> === null || item.<%- attributesArr[i][0] %> === null) && item.<%- attributesArr[i][0] %> !== values.current.<%- attributesArr[i][0] %>) { return true; }
    if(values.current.<%- attributesArr[i][0] %> !== null && item.<%- attributesArr[i][0] %> !== null && moment(values.current.<%- attributesArr[i][0] %>, "HH:mm:ss.SSSZ").format("HH:mm:ss.SSSZ") !== moment(item.<%- attributesArr[i][0] %>, "HH:mm:ss.SSSZ").format("HH:mm:ss.SSSZ")) { return true; }
    <%} else if(attributesArr[i][1] === 'Int'){-%>
    if(Number(values.current.<%- attributesArr[i][0] %>) !== Number(item.<%- attributesArr[i][0] %>)) { return true;}
<%} else {-%>
    if(values.current.<%- attributesArr[i][0] %> !== item.<%- attributesArr[i][0] %>) { return true;}
<%}-%>
<%}-%>
    return false;
  }

  function doSave(event) {
    //variables
    let keys = Object.keys(values.current);
    let variables = {};
    for(let i=0; i<keys.length; i++) {
      if(valuesOkRefs.current[keys[i]] !== -1) {
        variables[keys[i]] = values.current[keys[i]];
      }
    }
    //id
    variables.id = item.id;

    //addItems
<%for( let i=0; i<sortedAssociations.length; i++ ){
  if(sortedAssociations[i].type === "to_many") {
-%>
    variables.add<%- sortedAssociations[i].relationNameCp %> = <%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current;
<%}}-%>

    //removeItems
<%for( let i=0; i<sortedAssociations.length; i++ ){
  if(sortedAssociations[i].type === "to_many") {
-%>
    variables.remove<%- sortedAssociations[i].relationNameCp %> = <%- sortedAssociations[i].relationNameLc _%>IdsToRemove.current;
<%}}-%>

    /*
      API Request: updateItem
    */
    api.<%- nameLc _%>.updateItem(graphqlServerUrl, variables)
      .then(response => {
        if (
          response.data &&
          response.data.data
        ) {
          if(response.data.errors) {
            actionText.current = t('modelPanels.gotIt', "Got it");
            enqueueSnackbar( t('modelPanels.errors.e3', "The GraphQL query returned a response with errors. Please contact your administrator."), {
              variant: 'error',
              preventDuplicate: false,
              persist: true,
              action,
            });
            console.log("Errors: ", response.data.errors);
          } else {
            //ok
            enqueueSnackbar( t('modelPanels.messages.msg5', "Record updated successfully."), {
              variant: 'success',
              preventDuplicate: false,
              persist: false,
              anchorOrigin: {
                vertical: 'bottom',
                horizontal: 'left',
              },
            });
            onClose(event, true, item, response.data.data.update<%- nameCp %>);
          }
          return;

        } else { //error: bad response on updateItem()
          actionText.current = t('modelPanels.gotIt', "Got it");
          enqueueSnackbar( t('modelPanels.errors.e2', "An error ocurred while trying to execute the GraphQL query, cannot process server response. Please contact your administrator."), {
            variant: 'error',
            preventDuplicate: false,
            persist: true,
            action,
          });
          console.log("Error: ", t('modelPanels.errors.e2', "An error ocurred while trying to execute the GraphQL query, cannot process server response. Please contact your administrator."));
          return;
        }
      })
      .catch(err => { //error: on updateItem()
        actionText.current = t('modelPanels.gotIt', "Got it");
        enqueueSnackbar( t('modelPanels.errors.e1', "An error occurred while trying to execute the GraphQL query. Please contact your administrator."), {
          variant: 'error',
          preventDuplicate: false,
          persist: true,
          action,
        });
        console.log("Error: ", err);
        return;
      });
  }

  const handleTabsChange = (event, newValue) => {
    setTabsValue(newValue);
  };

  const handleSetValue = (value, status, key) => {
    values.current[key] = value;
    if(status !== valuesOkRefs.current[key]) {
      valuesOkRefs.current[key] = status;
      setValueOkStates({...valuesOkRefs.current});
    }
  }

  const handleSave = (event) => {
    if(areThereNotAcceptableFields()) {
      setConfirmationTitle( t('modelPanels.invalidFields', "Some fields are not valid") );
      setConfirmationText( t('modelPanels.invalidFieldsB', "To continue, please correct these fields.") );
      setConfirmationAcceptText("");
      setConfirmationRejectText( t('modelPanels.updateAccept', "I UNDERSTAND"));
      handleAccept.current = () => {
        setConfirmationOpen(false);
      }
      handleReject.current = () => {
        setConfirmationOpen(false);
      }
      setConfirmationOpen(true);
      return;
    }

    if(areThereIncompleteFields()) {
      setConfirmationTitle( t('modelPanels.incompleteFields', "Some fields are empty") );
      setConfirmationText( t('modelPanels.incompleteFieldsB', "Do you want to continue anyway?") );
      setConfirmationAcceptText( t('modelPanels.saveIncompleteAccept', "YES, SAVE") );
      setConfirmationRejectText( t('modelPanels.saveIncompleteReject', "DON'T SAVE YET") );
      handleAccept.current = () => {
        doSave(event);
        setConfirmationOpen(false);
      }
      handleReject.current = () => {
        setConfirmationOpen(false);
      }
      setConfirmationOpen(true);
    } else {
      doSave(event);
    }
  }

  const handleCancel = (event) => {
    if(areThereChangedFields()) {
        setConfirmationTitle( t('modelPanels.cancelChanges', "The edited information has not been saved") );
        setConfirmationText( t('modelPanels.cancelChangesB', "Some fields have been edited, if you continue without save, the changes will be lost, you want to continue?") );
        setConfirmationAcceptText( t('modelPanels.cancelChangesAccept', "YES, EXIT") );
        setConfirmationRejectText( t('modelPanels.cancelChangesReject', "STAY") );
        handleAccept.current = () => {
          setConfirmationOpen(false);
          onClose(event, false, item, null);
        }
        handleReject.current = () => {
          setConfirmationOpen(false);
        }
        setConfirmationOpen(true);
        return;
    } else {
      onClose(event, false, item, null);
    }
  }

  const onClose = (event, status, item, newItem) => {
    setOpen(false);
    handleClose(event, status, item, newItem);
  }

  const handleConfirmationAccept = (event) => {
    handleAccept.current();
  }

  const handleConfirmationReject = (event) => {
    handleReject.current();
  }

  const handleTransferToAdd = (associationKey, itemId) => {
    switch(associationKey) {
<%for( let i=0; i<sortedAssociations.length; i++ ){-%>
      case '<%- sortedAssociations[i].relationName _%>':
<%if((sortedAssociations[i].sqlType === 'belongsTo') && (sortedAssociations[i].foreignKey)){-%>
        <%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current = [];
        <%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current.push(itemId);
        set<%- sortedAssociations[i].relationNameCp _%>IdsToAddState(<%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current);
        handleSetValue(itemId, 1, '<%- sortedAssociations[i].foreignKey _%>');
        setForeignKeys({...foreignKeys, <%- sortedAssociations[i].foreignKey _%>: itemId});
<%} else if((sortedAssociations[i].sqlType === 'hasOne')){-%>
        <%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current = [];
        <%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current.push(itemId);
        set<%- sortedAssociations[i].relationNameCp _%>IdsToAddState(<%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current);
<%} else {-%>
        <%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current.push(itemId);
        set<%- sortedAssociations[i].relationNameCp _%>IdsToAddState(<%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current);
<%}-%>
        break;
<%}-%>

      default:
        break;
    }
  }

  const handleUntransferFromAdd =(associationKey, itemId) => {
<%for( let i=0; i<sortedAssociations.length; i++ ){-%>
    if(associationKey === '<%- sortedAssociations[i].relationName _%>') {
<%if((sortedAssociations[i].sqlType === 'belongsTo') && (sortedAssociations[i].foreignKey)){-%>
      <%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current = [];
      set<%- sortedAssociations[i].relationNameCp _%>IdsToAddState([]);
      handleSetValue(null, 0, '<%- sortedAssociations[i].foreignKey _%>');
      setForeignKeys({...foreignKeys, <%- sortedAssociations[i].foreignKey _%>: null});
<%} else if((sortedAssociations[i].sqlType === 'hasOne')){-%>
      <%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current = [];
      set<%- sortedAssociations[i].relationNameCp _%>IdsToAddState([]);
<%} else {-%>
      for(let i=0; i<<%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current.length; ++i)
      {
        if(<%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current[i] === itemId) {
          <%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current.splice(i, 1);
          set<%- sortedAssociations[i].relationNameCp _%>IdsToAddState(<%- sortedAssociations[i].relationNameLc _%>IdsToAdd.current);
          return;
        }
      }
<%}-%>
      return;
    }//end: case '<%- sortedAssociations[i].relationName _%>'
<%}-%>
  }

<%if(hasToManyAssociations) {-%>
  const handleTransferToRemove = (associationKey, itemId) => {
    switch(associationKey) {
<%for( let i=0; i<sortedAssociations.length; i++ ){
  if(sortedAssociations[i].type === "to_many") {
-%>
      case '<%- sortedAssociations[i].relationName _%>':
        <%- sortedAssociations[i].relationNameLc _%>IdsToRemove.current.push(itemId);
        set<%- sortedAssociations[i].relationNameCp _%>IdsToRemoveState(<%- sortedAssociations[i].relationNameLc _%>IdsToRemove.current);
        break;
<%}}-%>

      default:
        break;
    }
  }

  const handleUntransferFromRemove =(associationKey, itemId) => {
<%for( let i=0; i<sortedAssociations.length; i++ ){
  if(sortedAssociations[i].type === "to_many") {
-%>
    if(associationKey === '<%- sortedAssociations[i].relationName _%>') {
      for(let i=0; i<<%- sortedAssociations[i].relationNameLc _%>IdsToRemove.current.length; ++i)
      {
        if(<%- sortedAssociations[i].relationNameLc _%>IdsToRemove.current[i] === itemId) {
          <%- sortedAssociations[i].relationNameLc _%>IdsToRemove.current.splice(i, 1);
          set<%- sortedAssociations[i].relationNameCp _%>IdsToRemoveState(<%- sortedAssociations[i].relationNameLc _%>IdsToRemove.current);
          return;
        }
      }
      return;
    }//end: case '<%- sortedAssociations[i].relationName _%>'
<%}}-%>
  }
<%}-%>

<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
  const handleClickOn<%- sortedAssociatedModels[i].targetModelCp _%>Row = (event, item) => {
    set<%- sortedAssociatedModels[i].targetModelCp _%>DetailItem(item);
  };

  const handle<%- sortedAssociatedModels[i].targetModelCp _%>DetailDialogClose = (event) => {
    delayedClose<%- sortedAssociatedModels[i].targetModelCp _%>DetailPanel(event, 500);
  }

  const delayedClose<%- sortedAssociatedModels[i].targetModelCp _%>DetailPanel = async (event, ms) => {
    await new Promise(resolve => {
      window.setTimeout(function() {
        set<%- sortedAssociatedModels[i].targetModelCp _%>DetailDialogOpen(false);
        set<%- sortedAssociatedModels[i].targetModelCp _%>DetailItem(undefined);
        resolve("ok");
      }, ms);
    });
  };

<%}-%>


  return (
    <Dialog fullScreen open={open} onClose={handleCancel} TransitionComponent={Transition}>
      <AppBar>
        <Toolbar>
          <Tooltip title={ t('modelPanels.cancel') }>
            <IconButton 
              edge="start" 
              color="inherit" 
              onClick={handleCancel}
            >
              <CloseIcon />
            </IconButton>
          </Tooltip>
          <Typography variant="h6" className={classes.title}>
            { t('modelPanels.editing') +  ": <%- nameCp %> | id: " + item.id }
          </Typography>
          <Tooltip title={ t('modelPanels.save') + " <%- nameLc _%>" }>
            <Fab 
              color="secondary" 
              className={classes.fabButton}
              onClick={handleSave}
            >
              <SaveIcon />
            </Fab>
          </Tooltip>
        </Toolbar>
      </AppBar>
      <Toolbar />

      <div className={classes.root}>
        <Grid container justify='center' alignItems='flex-start' alignContent='flex-start'>
          <Grid item xs={12}>
            
            {/* TabsA: Menú */}
            <div className={classes.tabsA}>
            <<%- nameCp _%>TabsA
              value={tabsValue}
              handleChange={handleTabsChange}
              handleCancel={handleCancel}
              handleSave={handleSave}
            />
            </div>
              
            {/* Attributes Page [0] */}
            <<%- nameCp _%>AttributesPage
              hidden={tabsValue !== 0}
              item={item}
              valueOkStates={valueOkStates}
<%if(hasOwnForeingKeys){-%>
              foreignKeys = {foreignKeys}
<%}-%>
              handleSetValue={handleSetValue}
            />

            {/* Associations Page [1] */}
            <<%- nameCp _%>AssociationsPage
              hidden={tabsValue !== 1}
              item={item}
<%for( let i=0; i<sortedAssociations.length; i++ ){-%>
              <%- sortedAssociations[i].relationNameLc _%>IdsToAdd={<%- sortedAssociations[i].relationNameLc _%>IdsToAddState}
<%if(sortedAssociations[i].type === 'to_many'){-%>
              <%- sortedAssociations[i].relationNameLc _%>IdsToRemove={<%- sortedAssociations[i].relationNameLc _%>IdsToRemoveState}
<%}}-%>
              handleTransferToAdd={handleTransferToAdd}
              handleUntransferFromAdd={handleUntransferFromAdd}
<%if(hasToManyAssociations) {-%>
              handleTransferToRemove={handleTransferToRemove}
              handleUntransferFromRemove={handleUntransferFromRemove}
<%}-%>
<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
              handleClickOn<%- sortedAssociatedModels[i].targetModelCp _%>Row={handleClickOn<%- sortedAssociatedModels[i].targetModelCp _%>Row}
<%}-%>
            />

          </Grid>
        </Grid>

        {/* Confirmation Dialog */}
        <<%- nameCp _%>ConfirmationDialog
          open={confirmationOpen}
          title={confirmationTitle}
          text={confirmationText}
          acceptText={confirmationAcceptText}
          rejectText={confirmationRejectText}
          handleAccept={handleConfirmationAccept}
          handleReject={handleConfirmationReject}
        />

<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
        {/* Dialog: <%- sortedAssociatedModels[i].targetModelCp %> Detail Panel */}
        {(<%- sortedAssociatedModels[i].targetModelLc _%>DetailDialogOpen) && (
          <<%- sortedAssociatedModels[i].targetModelCp _%>DetailPanel
            permissions={permissions}
            item={<%- sortedAssociatedModels[i].targetModelLc _%>DetailItem}
            dialog={true}
            handleClose={handle<%- sortedAssociatedModels[i].targetModelCp _%>DetailDialogClose}
          />
        )}
<%}-%>
      </div>

    </Dialog>
  );
}
<%- nameCp _%>UpdatePanel.propTypes = {
  permissions: PropTypes.object,
  item: PropTypes.object.isRequired,
  handleClose: PropTypes.func.isRequired,
};
