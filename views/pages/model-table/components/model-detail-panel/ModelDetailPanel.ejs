import React, { useState, useEffect, useRef } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { modelChange } from '../../../../../../../store/actions'
import PropTypes from 'prop-types';
import api from '../../../../../../../requests/requests.index.js'
import { makeStyles } from '@material-ui/core/styles';
import { useTranslation } from 'react-i18next';
import { useSnackbar } from 'notistack';
import <%- nameCp _%>AttributesPage from './components/<%- nameLc _%>-attributes-page/<%- nameCp _%>AttributesPage'
import <%- nameCp _%>AssociationsPage from './components/<%- nameLc _%>-associations-page/<%- nameCp _%>AssociationsPage'
import <%- nameCp -%>UpdatePanel from '../<%- nameLc -%>-update-panel/<%- nameCp -%>UpdatePanel'
import <%- nameCp -%>DeleteConfirmationDialog from '../<%- nameCp -%>DeleteConfirmationDialog'
<%for( let i=0; i<sortedAssociatedModels.length; i++ ) {
  if(sortedAssociatedModels[i].targetModel !== name) {-%>
import <%- sortedAssociatedModels[i].targetModelCp _%> DetailPanel from '../../../<%- sortedAssociatedModels[i].targetModelLc _%>-table/components/<%- sortedAssociatedModels[i].targetModelLc _%>-detail-panel/<%- sortedAssociatedModels[i].targetModelCp _%>DetailPanel'
<%} else {-%>
import <%- sortedAssociatedModels[i].targetModelCp _%> DetailPanelB from '../../../<%- sortedAssociatedModels[i].targetModelLc _%>-table/components/<%- sortedAssociatedModels[i].targetModelLc _%>-detail-panel/<%- sortedAssociatedModels[i].targetModelCp _%>DetailPanel'
<%}}-%>
import Typography from '@material-ui/core/Typography';
import Grid from '@material-ui/core/Grid';
import Dialog from '@material-ui/core/Dialog';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Button from '@material-ui/core/Button';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from '@material-ui/icons/Close';
import Slide from '@material-ui/core/Slide';
import Tooltip from '@material-ui/core/Tooltip';
import Divider from '@material-ui/core/Divider';
import Delete from '@material-ui/icons/DeleteOutline';
import Edit from '@material-ui/icons/Edit';

const useStyles = makeStyles(theme => ({
  root: {
    minWidth: 450,
    minHeight: 1200,
    paddingTop: theme.spacing(1),
  },
  title: {
    marginLeft: theme.spacing(2),
    flex: 1,
  },
}));

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});

export default function <%- nameCp _%>DetailPanel(props) {
  const classes = useStyles();
  const { t } = useTranslation();
  const { enqueueSnackbar, closeSnackbar } = useSnackbar();
  const {
    permissions, 
    item,
    dialog,
    handleClose,
  } = props;
  
  const [open, setOpen] = useState(true);
  const [itemState, setItemState] = useState(item);
  const [valueOkStates, setValueOkStates] = useState(getInitialValueOkStates(item));

  const [updateDialogOpen, setUpdateDialogOpen] = useState(false);
  const [updateItem, setUpdateItem] = useState(undefined);
  const [deleteConfirmationDialogOpen, setDeleteConfirmationDialogOpen] = useState(false);
  const [deleteConfirmationItem, setDeleteConfirmationItem] = useState(undefined);

<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
  const [<%- sortedAssociatedModels[i].targetModelLc _%>DetailDialogOpen, set<%- sortedAssociatedModels[i].targetModelCp _%>DetailDialogOpen] = useState(false);
  const [<%- sortedAssociatedModels[i].targetModelLc _%>DetailItem, set<%- sortedAssociatedModels[i].targetModelCp _%>DetailItem] = useState(undefined);
<%}-%>

  const graphqlServerUrl = useSelector(state => state.urls.graphqlServerUrl);
  const changedModels = useSelector(state => state.changes.models);
  const dispatch = useDispatch();

  const actionText = useRef(null);
  const action = useRef((key) => (
    <>
      <Button color='inherit' variant='text' size='small' className={classes.notiErrorActionText} onClick={() => { closeSnackbar(key) }}>
        {actionText.current}
      </Button>
    </> 
  ));

  useEffect(() => {}, []);
  
<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
  useEffect(() => {
    if(<%- sortedAssociatedModels[i].targetModelLc _%>DetailItem !== undefined) {
      set<%- sortedAssociatedModels[i].targetModelCp _%>DetailDialogOpen(true);
    }
  }, [<%- sortedAssociatedModels[i].targetModelLc _%>DetailItem]);

<%}-%>

  useEffect(() => {
    if(updateItem !== undefined) {
      setUpdateDialogOpen(true);
    }
  }, [updateItem]);

  useEffect(() => {
    if(deleteConfirmationItem !== undefined) {
      setDeleteConfirmationDialogOpen(true);
    }
  }, [deleteConfirmationItem]);

  useEffect(() => {
    //check if this.item changed
    if(changedModels&&
        changedModels.<%- name _%>&&
        changedModels.<%- name _%>[String(item.id)]) {
          //update item
          if(changedModels.<%- name _%>[String(item.id)].op === "update"&&
              changedModels.<%- name _%>[String(item.id)].newItem) {
                setItemState(changedModels.<%- name _%>[String(item.id)].newItem);
          }
    }
  }, [changedModels, item.id]);

  useEffect(() => {
    if(itemState) {
      setValueOkStates(getInitialValueOkStates(itemState));
    }
  }, [itemState]);

  function doDelete(event, item) {
    //variables
    let variables = {id: item.id};

    /*
      API Request: deleteItem
    */
    api.<%- nameLc -%>.deleteItem(graphqlServerUrl, variables)
      .then(response => {
        if(
          response.data &&
          response.data.data
        ) {
          if(response.data.errors) {
            actionText.current = t('modelPanels.gotIt', "Got it");
            enqueueSnackbar( t('modelPanels.errors.e3', "The GraphQL query returned a response with errors. Please contact your administrator."), {
              variant: 'error',
              preventDuplicate: false,
              persist: true,
              action: action.current,
            });
            console.log("Errors: ", response.data.errors);
          }else {
            //ok
            enqueueSnackbar( t('modelPanels.messages.msg4', "Record deleted successfully."), {
              variant: 'success',
              preventDuplicate: false,
              persist: false,
              anchorOrigin: {
                vertical: 'bottom',
                horizontal: 'left',
              },
            });
            onSuccessDelete(event, item);
          }
          return;

        } else { //error: bad response on deleteItem()
          actionText.current = t('modelPanels.gotIt', "Got it");
          enqueueSnackbar( t('modelPanels.errors.e2', "An error ocurred while trying to execute the GraphQL query, cannot process server response. Please contact your administrator."), {
            variant: 'error',
            preventDuplicate: false,
            persist: true,
            action: action.current,
          });
          console.log("Error: ", t('modelPanels.errors.e2', "An error ocurred while trying to execute the GraphQL query, cannot process server response. Please contact your administrator."));
          return;
        }
      })
      .catch(err => { //error: on deleteItem()
        actionText.current = t('modelPanels.gotIt', "Got it");
        enqueueSnackbar( t('modelPanels.errors.e1', "An error occurred while trying to execute the GraphQL query. Please contact your administrator."), {
          variant: 'error',
          preventDuplicate: false,
          persist: true,
          action: action.current,
        });
        console.log("Error: ", err);
        return;
      });
  }

  function getInitialValueOkStates(item) {
    /*
      status codes:
        1: acceptable
        0: unknown/not tested yet (this is set on initial render)/empty
       -1: not acceptable 
    */
    let initialValueOkStates = {};

<%for( let i=0; i<attributesArr.length; i++ ){-%>
    initialValueOkStates.<%- attributesArr[i][0] %> = (item.<%- attributesArr[i][0] _%>!==null ? 1 : 0);
<%}-%>

    return initialValueOkStates;
  }

  const handleCancel = (event) => {
    setOpen(false);
    handleClose(event);
  }

  const handleUpdateClicked = (event, item) => {
    setOpen(false);
    delayedOpenUpdatePanel(event, item, 200);
  }

  const delayedOpenUpdatePanel = async (event, item, ms) => {
    await new Promise(resolve => {
      //set timeout
      window.setTimeout(function() {
        setUpdateItem(item);
        resolve("ok");
      }, ms);
    });
  };

  const handleUpdateDialogClose = (event, status, item, newItem, changedAssociations) => {
    if(status) {
      dispatch(modelChange('<%- name _%>', 'update', item, newItem, changedAssociations))
    }
    delayedCloseUpdatePanel(event, 500);
  }

  const delayedCloseUpdatePanel = async (event, ms) => {
    await new Promise(resolve => {
      //set timeout
      window.setTimeout(function() {
        setUpdateDialogOpen(false);
        setUpdateItem(undefined);
        handleClose(event);
        resolve("ok");
      }, ms);
    });
  };

  const handleDeleteClicked = (event, item) => {
    setDeleteConfirmationItem(item);
  }

  const handleDeleteConfirmationAccept = (event, item) => {
    setOpen(false);
    doDelete(event, item);
  }

  const onSuccessDelete = (event, item) => {
    dispatch(modelChange('<%- name _%>', 'delete', item, null))
    delayedCloseDeleteConfirmationAccept(event, 500);
  }

  const delayedCloseDeleteConfirmationAccept = async (event, ms) => {
    await new Promise(resolve => {
      //set timeout
      window.setTimeout(function() {
        setDeleteConfirmationDialogOpen(false);
        setDeleteConfirmationItem(undefined);
        handleClose(event);
        resolve("ok");
      }, ms);
    });
  };

  const handleDeleteConfirmationReject = (event) => {
    delayedCloseDeleteConfirmationReject(event, 500);
  }

  const delayedCloseDeleteConfirmationReject = async (event, ms) => {
    await new Promise(resolve => {
      //set timeout
      window.setTimeout(function() {
        setDeleteConfirmationDialogOpen(false);
        setDeleteConfirmationItem(undefined);
        resolve("ok");
      }, ms);
    });
  };

<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
  const handleClickOn<%- sortedAssociatedModels[i].targetModelCp _%>Row = (event, item) => {
    set<%- sortedAssociatedModels[i].targetModelCp _%>DetailItem(item);
  };

  const handle<%- sortedAssociatedModels[i].targetModelCp _%>DetailDialogClose = (event) => {
    delayedClose<%- sortedAssociatedModels[i].targetModelCp _%>DetailPanel(event, 500);
  }

  const delayedClose<%- sortedAssociatedModels[i].targetModelCp _%>DetailPanel = async (event, ms) => {
    await new Promise(resolve => {
      window.setTimeout(function() {
        set<%- sortedAssociatedModels[i].targetModelCp _%>DetailDialogOpen(false);
        set<%- sortedAssociatedModels[i].targetModelCp _%>DetailItem(undefined);
        resolve("ok");
      }, ms);
    });
  };
<%}-%>

  return (
    <div>
      {/* Dialog Mode */}
      {(dialog !== undefined && dialog === true) && (
        
        <Dialog fullScreen open={open} onClose={handleCancel} TransitionComponent={Transition}>
          <AppBar>
            <Toolbar>
              <Tooltip title={ t('modelPanels.close') }>
                <IconButton
                  edge="start"
                  color="inherit"
                  onClick={handleCancel}
                >
                  <CloseIcon fontSize="small" />
                </IconButton>
              </Tooltip>
              <Typography variant="h6" className={classes.title}>
                { t('modelPanels.detailOf') +  ": <%- nameCp %> | id: " + itemState.id }
              </Typography>
              {/*
                Actions:
                - Edit
                - Delete
              */}
              {
                /* acl check */
                (permissions&&permissions.user&&Array.isArray(permissions.user)
                &&(permissions.user.includes('update') || permissions.user.includes('*')))
                &&(
                  
                    <Tooltip title={ t('modelPanels.edit') }>
                      <IconButton
                        color='inherit'
                        onClick={(event) => {
                          event.stopPropagation();
                          handleUpdateClicked(event, itemState);
                        }}
                      >
                        <Edit fontSize="small" />
                      </IconButton>
                    </Tooltip>

                )
              }
              {
                /* acl check */
                (permissions&&permissions.user&&Array.isArray(permissions.user)
                &&(permissions.user.includes('delete') || permissions.user.includes('*')))
                &&(
                  
                    <Tooltip title={ t('modelPanels.delete') }>
                      <IconButton
                        color='inherit'
                        onClick={(event) => {
                          event.stopPropagation();
                          handleDeleteClicked(event, itemState);
                        }}
                      >
                        <Delete fontSize="small" />
                      </IconButton>
                    </Tooltip>
                    
                )
              }
            </Toolbar>
          </AppBar>
          <Toolbar />

          <div className={classes.root}>
            <Grid container justify='center' alignItems='flex-start' alignContent='flex-start' spacing={1}>

              <Grid item xs={12} sm={11} md={10} lg={9} xl={8}>
                <Divider />
                <Grid container justify='flex-start'>
                  <Grid item>
                    <Typography variant="body2" color="textSecondary" gutterBottom>
                      { t('modelPanels.attributes') }
                    </Typography>
                  </Grid>
                </Grid>
              </Grid>

              <Grid item xs={12}>
                {/* Attributes Page */}
                <<%- nameCp _%>AttributesPage
                  item={itemState}
                  valueOkStates={valueOkStates}
                />
              </Grid>

              <Grid item xs={12} sm={11} md={10} lg={9} xl={8}>
                <Divider />
                <Grid container justify='flex-start'>
                  <Grid item>
                    <Typography variant="body2" color="textSecondary" gutterBottom>
                      { t('modelPanels.associations') }
                    </Typography>
                  </Grid>
                </Grid>
              </Grid>
    
              <Grid item xs={12}>
                {/* Associations Page */}
                <<%- nameCp _%>AssociationsPage
                  item={itemState}
<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
                  handleClickOn<%- sortedAssociatedModels[i].targetModelCp _%>Row={handleClickOn<%- sortedAssociatedModels[i].targetModelCp _%>Row}
<%}-%>
                />
              </Grid>
            </Grid>
          </div>
        </Dialog>
      )}

      {/* No-Dialog Mode */}
      {(dialog !== undefined && dialog === false) && (
    
        <div className={classes.root}>
          <Grid container justify='center'>
            <Grid item xs={12}>
                
              {/* Attributes Page */}
              <<%- nameCp _%>AttributesPage
                item={itemState}
                valueOkStates={valueOkStates}
              />
  
              {/* Associations Page */}
              <<%- nameCp _%>AssociationsPage
                item={itemState}
<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
                handleClickOn<%- sortedAssociatedModels[i].targetModelCp _%>Row={handleClickOn<%- sortedAssociatedModels[i].targetModelCp _%>Row}
<%}-%>
              />
  
            </Grid>
          </Grid>
        </div>
      )}

      {/* Dialog: Update Panel */}
      {(updateDialogOpen) && (
        <<%- nameCp -%>UpdatePanel
          permissions={permissions}
          item={updateItem}
          handleClose={handleUpdateDialogClose}
        />
      )}

      {/* Dialog: Delete Confirmation */}
      {(deleteConfirmationDialogOpen) && (
        <<%- nameCp -%>DeleteConfirmationDialog
          permissions={permissions}
          item={deleteConfirmationItem}
          handleAccept={handleDeleteConfirmationAccept}
          handleReject={handleDeleteConfirmationReject}
        />
      )}

<%for( let i=0; i<sortedAssociatedModels.length; i++ ){-%>
      {/* Dialog: <%- sortedAssociatedModels[i].targetModelCp %> Detail Panel */}
      {(<%- sortedAssociatedModels[i].targetModelLc _%>DetailDialogOpen) && (
<%if(sortedAssociatedModels[i].targetModel !== name) {-%>
        <<%- sortedAssociatedModels[i].targetModelCp _%>DetailPanel
<%} else {-%>
        <<%- sortedAssociatedModels[i].targetModelCp _%>DetailPanelB
<%}-%>
          permissions={permissions}
          item={<%- sortedAssociatedModels[i].targetModelLc _%>DetailItem}
          dialog={true}
          handleClose={handle<%- sortedAssociatedModels[i].targetModelCp _%>DetailDialogClose}
        />
      )}
<%}-%>
    </div>
  );
}
<%- nameCp _%>DetailPanel.propTypes = {
  permissions: PropTypes.object,
  item: PropTypes.object.isRequired,
  dialog: PropTypes.bool,
  handleClose: PropTypes.func.isRequired,
};